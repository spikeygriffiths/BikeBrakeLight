/*
 * ACCELmod.h
 *
 * Created: 19/09/2017 09:05:08
 *  Author: Spikey
 */ 

#ifndef ACCELMOD_H_
#define ACCELMOD_H_

enum _ADXL363_REG {
	ADXL363_DEVID_AD = 0x00,	// [7:0] DEVID_AD[7:0] 0xAD R
	ADXL363_DEVID_MST = 0x01,	// [7:0] DEVID_MST[7:0] 0x1D R
	ADXL363_DEVID = 0x02,	// [7:0] DEVID[7:0] 0xF3 R
	ADXL363_REVID = 0x03,	// [7:0] REVID[7:0] 0x01 R
	//...gap
	ADXL363_XDATA = 0x08,	// [7:0] XDATA[7:0]
	ADXL363_YDATA = 0x09,	// [7:0] YDATA[7:0]
	ADXL363_ZDATA = 0x0A,	// [7:0] ZDATA[7:0]
	ADXL363_STATUS = 0x0B,	// [7:0] ERR_USER_REGS AWAKE INACT ACT FIFO_OVERRUN FIFO_WATERMARK FIFO_READY DATA_READY 
	ADXL363_FIFO_ENTRIES_L = 0x0C,	// [7:0] FIFO_ENTRIES_L[7:0] 0x00 R
	ADXL363_FIFO_ENTRIES_H = 0x0D,	// [7:0] UNUSED FIFO_ENTRIES_H[1:0] 0x00 R
	ADXL363_XDATA_L = 0x0E,	// [7:0] XDATA_L[7:0] 0x00 R
	ADXL363_XDATA_H = 0x0F,	// [7:0] SX XDATA_H[3:0] 0x00 R
	ADXL363_YDATA_L = 0x10,	// [7:0] YDATA_L[7:0] 0x00 R
	ADXL363_YDATA_H = 0x11,	// [7:0] SX YDATA_H[3:0] 0x00 R
	ADXL363_ZDATA_L = 0x12,	// [7:0] ZDATA_L[7:0] 0x00 R
	ADXL363_ZDATA_H = 0x13,	// [7:0] SX ZDATA_H[3:0] 0x00 R
	ADXL363_TEMP_L = 0x14,	// [7:0] TEMP_L[7:0] 0x00 R (Unknown units, typically reads ~1000 when 18'C)
	ADXL363_TEMP_H = 0x15,	// [7:0] SX TEMP_H[3:0] 0x00 R
	ADXL363_ADC_DATA_L = 0x16,	// [7:0] ADC_DATA_L[7:0] 0x00 R
	ADXL363_ADC_DATA_H = 0x17,	// [7:0] SX ADC_DATA_H[2:0] 0x00 R
	//...gap
	ADXL363_SOFT_RESET = 0x1F,	// [7:0] SOFT_RESET[7:0]
	ADXL363_THRESH_ACT_L = 0x20,	// [7:0] THRESH_ACT_L[7:0] 0x00 RW
	ADXL363_THRESH_ACT_H = 0x21,	// [7:0] UNUSED THRESH_ACT_H[2:0] 0x00 RW
	ADXL363_TIME_ACT = 0x22,	// [7:0] TIME_ACT[7:0] 0x00 RW
	ADXL363_THRESH_INACT_L = 0x23,	// [7:0] THRESH_INACT_L[7:0] 0x00 RW
	ADXL363_THRESH_INACT_H = 0x24,	// [7:0] UNUSED THRESH_INACT_H[2:0] 0x00 RW
	ADXL363_TIME_INACT_L = 0x25,	// [7:0] TIME_INACT_L[7:0] 0x00 RW
	ADXL363_TIME_INACT_H = 0x26,	// [7:0] TIME_INACT_H[7:0] 0x00 RW
	ADXL363_ACT_INACT_CTL = 0x27,	// [7:0] UNUSED LINKLOOP INACT_REF INACT_EN ACT_REF ACT_EN 0x00 RW
	ADXL363_FIFO_CONTROL = 0x28,	// [7:0] UNUSED AH FIFO_TEMP FIFO_MODE 0x00 RW
	ADXL363_FIFO_SAMPLES = 0x29,	// [7:0] FIFO_SAMPLES[7:0] 0x80 RW
	ADXL363_INTMAP1 = 0x2A,	// [7:0] INT_LOW AWAKE INACT ACT FIFO_OVERRUN FIFO_WATERMARK FIFO_READY DATA_READY
	ADXL363_INTMAP2 = 0x2B,	// [7:0] INT_LOW AWAKE INACT ACT FIFO_OVERRUN FIFO_WATERMARK FIFO_READY DATA_READY
	ADXL363_FILTER_CTL = 0x2C,	// [7:0] RANGE RES HALF_BW EXT_SAMPLE ODR 0x13 RW
	ADXL363_POWER_CTL = 0x2D,	// [7:0] ADC_EN EXT_CLK LOW_NOISE WAKEUP AUTOSLEEP MEASURE 0x00 RW
	ADXL363_SELF_TEST = 0x2E,	// [7:0] UNUSED ST 0x00 RW
	//...gap
	ADXL363_ILLEGAL = 0x3F
};

#define G (1000)	// Assume +/- 2G range, ie that 1 bit is 1 milliG
#define BRAKING_ACCELERATION (G/5)
#define FORWARD_MOTION (G/8)
#define ACTIVITY_TIMEOUT_S (30)

typedef enum _ADXL363_REG ADXL363_REG;

typedef enum {
	ACCELSTATE_IDLE,
	ACCELSTATE_INIT,
	ACCELSTATE_JUSTFIRED,
	ACCELSTATE_MONITOR,
	ACCELSTATE_IGNORING,
} ACCELSTATE;

#define SPIDisable() SPCR &= ~(1<<SPE)	// Disable SPI when asleep
#define SPIEnable() SPCR |= (1<<SPE)	// Re-enable SPI, assuming still set to master and clock speed

void ACCELEventHandler(U8 eventId, U16 eventArg);

#endif /* ACCELMOD_H_ */