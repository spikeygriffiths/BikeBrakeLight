
BikeBrakeLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000162  00800100  00001da2  00001e36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001da2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  00800262  00800262  00001f98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001fc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003810  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016ea  00000000  00000000  00005a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c3b  00000000  00000000  0000713a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d0  00000000  00000000  00008d78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011ce  00000000  00000000  00009348  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020de  00000000  00000000  0000a516  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  0000c5f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 80 03 	jmp	0x700	; 0x700 <__ctors_end>
       4:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__vector_1>
       8:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
       c:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__vector_3>
      10:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      14:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      18:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      1c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      20:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      24:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      28:	0c 94 42 0e 	jmp	0x1c84	; 0x1c84 <__vector_10>
      2c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      30:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      34:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      38:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      3c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      40:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      44:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      48:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      4c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      50:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      54:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      58:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      5c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      60:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      64:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      68:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      6c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      70:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      74:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      78:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      7c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      80:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      84:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      88:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      8c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      90:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      94:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      98:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      9c:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      a0:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      a4:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      a8:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__bad_interrupt>
      ac:	30 04       	cpc	r3, r0
      ae:	3f 04       	cpc	r3, r15
      b0:	65 04       	cpc	r6, r5
      b2:	7c 05       	cpc	r23, r12
      b4:	35 05       	cpc	r19, r5
      b6:	27 05       	cpc	r18, r7
      b8:	7c 05       	cpc	r23, r12
      ba:	2e 05       	cpc	r18, r14
      bc:	1d 05       	cpc	r17, r13
      be:	7c 05       	cpc	r23, r12
      c0:	7c 05       	cpc	r23, r12
      c2:	7c 05       	cpc	r23, r12
      c4:	7c 05       	cpc	r23, r12
      c6:	7c 05       	cpc	r23, r12
      c8:	7c 05       	cpc	r23, r12
      ca:	7c 05       	cpc	r23, r12
      cc:	7c 05       	cpc	r23, r12
      ce:	7c 05       	cpc	r23, r12
      d0:	7c 05       	cpc	r23, r12
      d2:	7c 05       	cpc	r23, r12
      d4:	7c 05       	cpc	r23, r12
      d6:	16 05       	cpc	r17, r6
      d8:	de 06       	cpc	r13, r30
      da:	a9 07       	cpc	r26, r25
      dc:	f0 06       	cpc	r15, r16
      de:	a9 07       	cpc	r26, r25
      e0:	7f 07       	cpc	r23, r31
      e2:	77 07       	cpc	r23, r23
      e4:	a9 07       	cpc	r26, r25
      e6:	a9 07       	cpc	r26, r25
      e8:	a9 07       	cpc	r26, r25
      ea:	a9 07       	cpc	r26, r25
      ec:	6c 07       	cpc	r22, r28
      ee:	a9 07       	cpc	r26, r25
      f0:	a9 07       	cpc	r26, r25
      f2:	57 07       	cpc	r21, r23
      f4:	a9 07       	cpc	r26, r25
      f6:	a9 07       	cpc	r26, r25
      f8:	a9 07       	cpc	r26, r25
      fa:	a9 07       	cpc	r26, r25
      fc:	36 07       	cpc	r19, r22
      fe:	2a 07       	cpc	r18, r26
     100:	50 07       	cpc	r21, r16
     102:	57 09       	sbc	r21, r7
     104:	5e 09       	sbc	r21, r14
     106:	af 0a       	sbc	r10, r31
     108:	70 09       	sbc	r23, r0
     10a:	af 0a       	sbc	r10, r31
     10c:	af 0a       	sbc	r10, r31
     10e:	56 0a       	sbc	r5, r22
     110:	61 0a       	sbc	r6, r17
     112:	af 0a       	sbc	r10, r31
     114:	af 0a       	sbc	r10, r31
     116:	50 0a       	sbc	r5, r16
     118:	af 0a       	sbc	r10, r31
     11a:	af 0a       	sbc	r10, r31
     11c:	4b 0a       	sbc	r4, r27
     11e:	af 0a       	sbc	r10, r31
     120:	8d 0a       	sbc	r8, r29
     122:	af 0a       	sbc	r10, r31
     124:	af 0a       	sbc	r10, r31
     126:	64 0a       	sbc	r6, r20
     128:	15 0b       	sbc	r17, r21
     12a:	30 0b       	sbc	r19, r16
     12c:	36 0b       	sbc	r19, r22
     12e:	8e 0b       	sbc	r24, r30
     130:	35 0c       	add	r3, r5
     132:	21 0c       	add	r2, r1
     134:	35 0c       	add	r3, r5
     136:	fe 0b       	sbc	r31, r30
     138:	11 0c       	add	r1, r1
     13a:	35 0c       	add	r3, r5
     13c:	35 0c       	add	r3, r5
     13e:	a0 0b       	sbc	r26, r16
     140:	a6 0b       	sbc	r26, r22
     142:	35 0c       	add	r3, r5
     144:	b5 0b       	sbc	r27, r21
     146:	35 0c       	add	r3, r5
     148:	ab 0b       	sbc	r26, r27
     14a:	35 0c       	add	r3, r5
     14c:	f6 0b       	sbc	r31, r22
     14e:	35 0c       	add	r3, r5
     150:	d7 0b       	sbc	r29, r23
     152:	c0 0b       	sbc	r28, r16
     154:	cb 0b       	sbc	r28, r27

00000156 <LedBrake>:
     156:	ff ff ff ff ff ff 80 00 00 06 00 80 00 80 00 80     ................
     166:	00 02 00 00 00 00 00 00 00 00 00 04 00 00 00 00     ................
     176:	00 00 00 00 ff 7f 00 00                             ........

0000017e <LedPersistent>:
     17e:	ff 5f ff 0f ff 2f 40 00 80 00 ff 2f ff 5f ff 0f     ._.../@..../._..
     18e:	40 00 80 00 ff 0f ff 2f ff 5f 40 00 80 00 00 00     @....../._@.....
     19e:	00 00 00 00 ff 7f 00 00                             ........

000001a6 <LedCirculate>:
     1a6:	ff 5f 00 00 00 00 00 01 00 01 00 00 ff 5f 00 00     ._..........._..
     1b6:	00 01 00 01 00 00 00 00 ff 5f 00 01 00 01 00 00     ........._......
     1c6:	00 00 00 00 ff 7f 00 00                             ........

000001ce <LedFlashTop>:
     1ce:	00 00 00 00 ff 5f 80 00 00 02 00 00 00 00 00 00     ....._..........
     1de:	80 00 00 02 00 00 00 00 00 00 ff 7f 00 00           ..............

000001ec <LedOn>:
     1ec:	ff 5f ff 5f ff 5f 00 04 01 00 00 00 00 00 00 00     ._._._..........
     1fc:	ff 7f 00 00                                         ....

00000200 <LedOff>:
     200:	00 00 00 00 00 00 00 04 01 00 00 00 00 00 00 00     ................
     210:	ff 7f 00 00                                         ....

00000214 <LedLevel100>:
     214:	00 00 00 00 ff 01 00 01 00 00 00 00 ff 01 ff 0f     ................
     224:	00 01 00 00 ff 01 ff 0f 00 00 00 01 00 00 ff 0f     ................
     234:	00 00 ff 01 00 01 00 00 00 00 ff 01 ff 0f 00 01     ................
     244:	00 00 ff 01 ff 0f 00 00 00 01 00 00 ff 0f 00 00     ................
     254:	ff 01 00 01 00 00 00 00 ff 01 ff 0f 00 01 00 00     ................
     264:	ff 01 ff 0f 00 00 00 01 00 00 ff 0f 00 00 00 00     ................
     274:	00 01 00 00 ff 01 00 00 00 00 00 01 00 00 00 00     ................
     284:	00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 01     ................
     294:	00 00 00 00 00 00 ff 01 00 01 00 00 00 00 00 00     ................
     2a4:	ff 0f 00 01 00 00 00 00 ff 01 ff 0f 00 01 00 00     ................
     2b4:	00 00 ff 0f ff 0f 00 01 00 00 ff 01 ff 0f ff 0f     ................
     2c4:	00 01 00 00 ff 0f ff 0f ff 0f 00 01 00 00 ff 0f     ................
     2d4:	ff 0f ff 0f 00 10 00 00 00 00 00 00 00 00 ff 7f     ................
	...

000002e6 <LedLevel84>:
     2e6:	00 00 00 00 ff 01 00 01 00 00 00 00 ff 01 ff 0f     ................
     2f6:	00 01 00 00 ff 01 ff 0f 00 00 00 01 00 00 ff 0f     ................
     306:	00 00 ff 01 00 01 00 00 00 00 ff 01 ff 0f 00 01     ................
     316:	00 00 ff 01 ff 0f 00 00 00 01 00 00 ff 0f 00 00     ................
     326:	ff 01 00 01 00 00 00 00 ff 01 ff 0f 00 01 00 00     ................
     336:	ff 01 ff 0f 00 00 00 01 00 00 ff 0f 00 00 00 00     ................
     346:	00 01 00 00 ff 01 00 00 00 00 00 01 00 00 00 00     ................
     356:	00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 01     ................
     366:	00 00 00 00 00 00 ff 01 00 01 00 00 00 00 00 00     ................
     376:	ff 0f 00 01 00 00 00 00 ff 01 ff 0f 00 01 00 00     ................
     386:	00 00 ff 0f ff 0f 00 01 00 00 ff 01 ff 0f ff 0f     ................
     396:	00 01 00 00 ff 01 ff 0f ff 0f 00 00 00 10 00 00     ................
     3a6:	00 00 00 00 ff 7f 00 00                             ........

000003ae <LedLevel67>:
     3ae:	00 00 00 00 ff 01 00 01 00 00 00 00 ff 01 ff 0f     ................
     3be:	00 01 00 00 ff 01 ff 0f 00 00 00 01 00 00 ff 0f     ................
     3ce:	00 00 ff 01 00 01 00 00 00 00 ff 01 ff 0f 00 01     ................
     3de:	00 00 ff 01 ff 0f 00 00 00 01 00 00 ff 0f 00 00     ................
     3ee:	ff 01 00 01 00 00 00 00 ff 01 ff 0f 00 01 00 00     ................
     3fe:	ff 01 ff 0f 00 00 00 01 00 00 ff 0f 00 00 00 00     ................
     40e:	00 01 00 00 ff 01 00 00 00 00 00 01 00 00 00 00     ................
     41e:	00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 01     ................
     42e:	00 00 00 00 00 00 ff 01 00 01 00 00 00 00 00 00     ................
     43e:	ff 0f 00 01 00 00 00 00 ff 01 ff 0f 00 01 00 00     ................
     44e:	00 00 ff 0f ff 0f 00 01 00 00 00 00 ff 0f ff 0f     ................
     45e:	00 00 00 10 00 00 00 00 00 00 ff 7f 00 00           ..............

0000046c <LedLevel50>:
     46c:	00 00 00 00 ff 01 00 01 00 00 00 00 ff 01 ff 0f     ................
     47c:	00 01 00 00 ff 01 ff 0f 00 00 00 01 00 00 ff 0f     ................
     48c:	00 00 ff 01 00 01 00 00 00 00 ff 01 ff 0f 00 01     ................
     49c:	00 00 ff 01 ff 0f 00 00 00 01 00 00 ff 0f 00 00     ................
     4ac:	ff 01 00 01 00 00 00 00 ff 01 ff 0f 00 01 00 00     ................
     4bc:	ff 01 ff 0f 00 00 00 01 00 00 ff 0f 00 00 00 00     ................
     4cc:	00 01 00 00 ff 01 00 00 00 00 00 01 00 00 00 00     ................
     4dc:	00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 01     ................
     4ec:	00 00 00 00 00 00 ff 01 00 01 00 00 00 00 00 00     ................
     4fc:	ff 0f 00 01 00 00 00 00 ff 01 ff 0f 00 01 00 00     ................
     50c:	00 00 ff 01 ff 0f 00 00 00 10 00 00 00 00 00 00     ................
     51c:	ff 7f 00 00                                         ....

00000520 <LedLevel33>:
     520:	00 00 00 00 ff 01 00 01 00 00 00 00 ff 01 ff 0f     ................
     530:	00 01 00 00 ff 01 ff 0f 00 00 00 01 00 00 ff 0f     ................
     540:	00 00 ff 01 00 01 00 00 00 00 ff 01 ff 0f 00 01     ................
     550:	00 00 ff 01 ff 0f 00 00 00 01 00 00 ff 0f 00 00     ................
     560:	ff 01 00 01 00 00 00 00 ff 01 ff 0f 00 01 00 00     ................
     570:	ff 01 ff 0f 00 00 00 01 00 00 ff 0f 00 00 00 00     ................
     580:	00 01 00 00 ff 01 00 00 00 00 00 01 00 00 00 00     ................
     590:	00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 01     ................
     5a0:	00 00 00 00 00 00 ff 01 00 01 00 00 00 00 00 00     ................
     5b0:	ff 0f 00 01 00 00 00 00 00 00 ff 0f 00 00 00 10     ................
     5c0:	00 00 00 00 00 00 ff 7f 00 00                       ..........

000005ca <LedLevel17>:
     5ca:	00 00 00 00 ff 01 00 01 00 00 00 00 ff 01 ff 0f     ................
     5da:	00 01 00 00 ff 01 ff 0f 00 00 00 01 00 00 ff 0f     ................
     5ea:	00 00 ff 01 00 01 00 00 00 00 ff 01 ff 0f 00 01     ................
     5fa:	00 00 ff 01 ff 0f 00 00 00 01 00 00 ff 0f 00 00     ................
     60a:	ff 01 00 01 00 00 00 00 ff 01 ff 0f 00 01 00 00     ................
     61a:	ff 01 ff 0f 00 00 00 01 00 00 ff 0f 00 00 00 00     ................
     62a:	00 01 00 00 ff 01 00 00 00 00 00 01 00 00 00 00     ................
     63a:	00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 01     ................
     64a:	00 00 00 00 00 00 ff 01 00 01 00 00 00 00 00 00     ................
     65a:	ff 01 00 00 00 10 00 00 00 00 00 00 ff 7f 00 00     ................

0000066a <LedLevel0>:
     66a:	00 00 00 00 ff 01 00 01 00 00 00 00 ff 01 ff 0f     ................
     67a:	00 01 00 00 ff 01 ff 0f 00 00 00 01 00 00 ff 0f     ................
     68a:	00 00 ff 01 00 01 00 00 00 00 ff 01 ff 0f 00 01     ................
     69a:	00 00 ff 01 ff 0f 00 00 00 01 00 00 ff 0f 00 00     ................
     6aa:	ff 01 00 01 00 00 00 00 ff 01 ff 0f 00 01 00 00     ................
     6ba:	ff 01 ff 0f 00 00 00 01 00 00 ff 0f 00 00 00 00     ................
     6ca:	00 01 00 00 ff 01 00 00 00 00 00 01 00 00 00 00     ................
     6da:	00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 01     ................
	...
     6f2:	00 00 00 10 00 00 00 00 00 00 ff 7f 00 00           ..............

00000700 <__ctors_end>:
     700:	11 24       	eor	r1, r1
     702:	1f be       	out	0x3f, r1	; 63
     704:	cf ef       	ldi	r28, 0xFF	; 255
     706:	da e0       	ldi	r29, 0x0A	; 10
     708:	de bf       	out	0x3e, r29	; 62
     70a:	cd bf       	out	0x3d, r28	; 61

0000070c <__do_copy_data>:
     70c:	12 e0       	ldi	r17, 0x02	; 2
     70e:	a0 e0       	ldi	r26, 0x00	; 0
     710:	b1 e0       	ldi	r27, 0x01	; 1
     712:	e2 ea       	ldi	r30, 0xA2	; 162
     714:	fd e1       	ldi	r31, 0x1D	; 29
     716:	02 c0       	rjmp	.+4      	; 0x71c <__do_copy_data+0x10>
     718:	05 90       	lpm	r0, Z+
     71a:	0d 92       	st	X+, r0
     71c:	a2 36       	cpi	r26, 0x62	; 98
     71e:	b1 07       	cpc	r27, r17
     720:	d9 f7       	brne	.-10     	; 0x718 <__do_copy_data+0xc>

00000722 <__do_clear_bss>:
     722:	22 e0       	ldi	r18, 0x02	; 2
     724:	a2 e6       	ldi	r26, 0x62	; 98
     726:	b2 e0       	ldi	r27, 0x02	; 2
     728:	01 c0       	rjmp	.+2      	; 0x72c <.do_clear_bss_start>

0000072a <.do_clear_bss_loop>:
     72a:	1d 92       	st	X+, r1

0000072c <.do_clear_bss_start>:
     72c:	ac 3a       	cpi	r26, 0xAC	; 172
     72e:	b2 07       	cpc	r27, r18
     730:	e1 f7       	brne	.-8      	; 0x72a <.do_clear_bss_loop>
     732:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <main>
     736:	0c 94 cf 0e 	jmp	0x1d9e	; 0x1d9e <_exit>

0000073a <__bad_interrupt>:
     73a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000073e <__vector_3>:
int ACCELGetAxis(ADXL363_REG reg);	// Use ADXL363_XDATA_L for X, ADXL363_YDATA_L for Y and ADXL363_ZDATA_L for Z
U8 SPItrx(U8 cData);
bool onBike;

ISR(INT2_vect)	// Accelerometer interrupt
{
     73e:	1f 92       	push	r1
     740:	0f 92       	push	r0
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	0f 92       	push	r0
     746:	11 24       	eor	r1, r1
     748:	8f 93       	push	r24
	ACC_LED_ON;	// Turn it off by pressing the button.  Just for debugging
	accelInt = true;
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <accelInt>
}
     750:	8f 91       	pop	r24
     752:	0f 90       	pop	r0
     754:	0f be       	out	0x3f, r0	; 63
     756:	0f 90       	pop	r0
     758:	1f 90       	pop	r1
     75a:	18 95       	reti

0000075c <SPItrx>:
	return val;
}

U8 SPItrx(U8 cData)
{
	SPDR = cData;	// Start transmission
     75c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))) ;	// Wait for transmission complete
     75e:	0d b4       	in	r0, 0x2d	; 45
     760:	07 fe       	sbrs	r0, 7
     762:	fd cf       	rjmp	.-6      	; 0x75e <SPItrx+0x2>
	return SPDR;	// Return Data Register
     764:	8e b5       	in	r24, 0x2e	; 46
}
     766:	08 95       	ret

00000768 <ACCELWriteReg8>:
		break;	// Does nothing, but stops useless warnings from the compiler
	}
}

void ACCELWriteReg8(ADXL363_REG reg, U8 val)
{
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	d8 2f       	mov	r29, r24
     76e:	c6 2f       	mov	r28, r22
	PORTB &= ~0x01;	// Slave Select low to select ADXL363
     770:	28 98       	cbi	0x05, 0	; 5
	SPIEnable();
     772:	8c b5       	in	r24, 0x2c	; 44
     774:	80 64       	ori	r24, 0x40	; 64
     776:	8c bd       	out	0x2c, r24	; 44
	SPItrx(0x0A);	// Write register command
     778:	8a e0       	ldi	r24, 0x0A	; 10
     77a:	0e 94 ae 03 	call	0x75c	; 0x75c <SPItrx>
	SPItrx(reg);	// Select register
     77e:	8d 2f       	mov	r24, r29
     780:	0e 94 ae 03 	call	0x75c	; 0x75c <SPItrx>
	SPItrx(val);	// Send value
     784:	8c 2f       	mov	r24, r28
     786:	0e 94 ae 03 	call	0x75c	; 0x75c <SPItrx>
	SPIDisable();
     78a:	8c b5       	in	r24, 0x2c	; 44
     78c:	8f 7b       	andi	r24, 0xBF	; 191
     78e:	8c bd       	out	0x2c, r24	; 44
	PORTB |= 0x01;	// Deselect SS by driving it high at end of transaction
     790:	28 9a       	sbi	0x05, 0	; 5
}
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	08 95       	ret

00000798 <ACCELReadReg8>:

U8 ACCELReadReg8(ADXL363_REG reg)
{
     798:	cf 93       	push	r28
     79a:	c8 2f       	mov	r28, r24
	U8 val;
	PORTB &= ~0x01;	// Slave Select low to select ADXL363
     79c:	28 98       	cbi	0x05, 0	; 5
	SPIEnable();
     79e:	8c b5       	in	r24, 0x2c	; 44
     7a0:	80 64       	ori	r24, 0x40	; 64
     7a2:	8c bd       	out	0x2c, r24	; 44
	SPItrx(0x0B);	// Read register command
     7a4:	8b e0       	ldi	r24, 0x0B	; 11
     7a6:	0e 94 ae 03 	call	0x75c	; 0x75c <SPItrx>
	SPItrx(reg);		// Select register
     7aa:	8c 2f       	mov	r24, r28
     7ac:	0e 94 ae 03 	call	0x75c	; 0x75c <SPItrx>
	val = SPItrx(0xFF);	// Send dummy byte to get answer
     7b0:	8f ef       	ldi	r24, 0xFF	; 255
     7b2:	0e 94 ae 03 	call	0x75c	; 0x75c <SPItrx>
	SPIDisable();
     7b6:	9c b5       	in	r25, 0x2c	; 44
     7b8:	9f 7b       	andi	r25, 0xBF	; 191
     7ba:	9c bd       	out	0x2c, r25	; 44
	PORTB |= 0x01;	// Deselect SS by driving it high at end of transaction
     7bc:	28 9a       	sbi	0x05, 0	; 5
	return val;
}
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <ACCELWriteReg16>:

void ACCELWriteReg16(ADXL363_REG reg, U16 val)
{
     7c2:	1f 93       	push	r17
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	18 2f       	mov	r17, r24
     7ca:	d6 2f       	mov	r29, r22
     7cc:	c7 2f       	mov	r28, r23
	PORTB &= ~0x01;	// Slave Select low to select ADXL363
     7ce:	28 98       	cbi	0x05, 0	; 5
	SPIEnable();
     7d0:	8c b5       	in	r24, 0x2c	; 44
     7d2:	80 64       	ori	r24, 0x40	; 64
     7d4:	8c bd       	out	0x2c, r24	; 44
	SPItrx(0x0A);	// Write register command
     7d6:	8a e0       	ldi	r24, 0x0A	; 10
     7d8:	0e 94 ae 03 	call	0x75c	; 0x75c <SPItrx>
	SPItrx(reg);		// Select register
     7dc:	81 2f       	mov	r24, r17
     7de:	0e 94 ae 03 	call	0x75c	; 0x75c <SPItrx>
	SPItrx(val & 0xFF);	// Send lo byte
     7e2:	8d 2f       	mov	r24, r29
     7e4:	0e 94 ae 03 	call	0x75c	; 0x75c <SPItrx>
	SPItrx(val >> 8);	// Send hi byte
     7e8:	8c 2f       	mov	r24, r28
     7ea:	0e 94 ae 03 	call	0x75c	; 0x75c <SPItrx>
	SPIDisable();
     7ee:	8c b5       	in	r24, 0x2c	; 44
     7f0:	8f 7b       	andi	r24, 0xBF	; 191
     7f2:	8c bd       	out	0x2c, r24	; 44
	PORTB |= 0x01;	// Deselect SS by driving it high at end of transaction
     7f4:	28 9a       	sbi	0x05, 0	; 5
}
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	08 95       	ret

000007fe <ACCELReadReg16>:

S16 ACCELReadReg16(ADXL363_REG reg)
{
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	c8 2f       	mov	r28, r24
	U16 val;
	PORTB &= ~0x01;	// Slave Select low to select ADXL363
     804:	28 98       	cbi	0x05, 0	; 5
	SPIEnable();
     806:	8c b5       	in	r24, 0x2c	; 44
     808:	80 64       	ori	r24, 0x40	; 64
     80a:	8c bd       	out	0x2c, r24	; 44
	SPItrx(0x0B);	// Read register command
     80c:	8b e0       	ldi	r24, 0x0B	; 11
     80e:	0e 94 ae 03 	call	0x75c	; 0x75c <SPItrx>
	SPItrx(reg);		// Select register
     812:	8c 2f       	mov	r24, r28
     814:	0e 94 ae 03 	call	0x75c	; 0x75c <SPItrx>
	val = SPItrx(0xFF);	// Send dummy byte to get lo byte
     818:	8f ef       	ldi	r24, 0xFF	; 255
     81a:	0e 94 ae 03 	call	0x75c	; 0x75c <SPItrx>
     81e:	c8 2f       	mov	r28, r24
     820:	d0 e0       	ldi	r29, 0x00	; 0
	val |= ((U16)SPItrx(0xFF) << 8);	// Send dummy byte to get hi byte
     822:	8f ef       	ldi	r24, 0xFF	; 255
     824:	0e 94 ae 03 	call	0x75c	; 0x75c <SPItrx>
	SPIDisable();
     828:	9c b5       	in	r25, 0x2c	; 44
     82a:	9f 7b       	andi	r25, 0xBF	; 191
     82c:	9c bd       	out	0x2c, r25	; 44
	PORTB |= 0x01;	// Deselect SS by driving it high at end of transaction
     82e:	28 9a       	sbi	0x05, 0	; 5
	return val;
}
     830:	9e 01       	movw	r18, r28
     832:	38 2b       	or	r19, r24
     834:	c9 01       	movw	r24, r18
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
     83a:	08 95       	ret

0000083c <ACCELEventHandler>:
	ACC_LED_ON;	// Turn it off by pressing the button.  Just for debugging
	accelInt = true;
}

void ACCELEventHandler(U8 eventId, U16 eventArg)
{
     83c:	ef 92       	push	r14
     83e:	ff 92       	push	r15
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
	S16 x,y,z;

	switch (eventId) {
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	fc 01       	movw	r30, r24
     84c:	31 97       	sbiw	r30, 0x01	; 1
     84e:	e6 31       	cpi	r30, 0x16	; 22
     850:	f1 05       	cpc	r31, r1
     852:	08 f0       	brcs	.+2      	; 0x856 <ACCELEventHandler+0x1a>
     854:	51 c1       	rjmp	.+674    	; 0xaf8 <ACCELEventHandler+0x2bc>
     856:	eb 01       	movw	r28, r22
     858:	ea 5a       	subi	r30, 0xAA	; 170
     85a:	ff 4f       	sbci	r31, 0xFF	; 255
     85c:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__tablejump2__>
	case EVENT_INIT:
		accelInt = false;
     860:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <accelInt>
		accelState = ACCELSTATE_INIT;	// Interrupt only works after acknowledging first IRQ
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <accelState>
		accelTimeoutMs = 100;	// Complete initialisation shortly after startup
     86a:	24 e6       	ldi	r18, 0x64	; 100
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	30 93 65 02 	sts	0x0265, r19	; 0x800265 <accelTimeoutMs+0x1>
     872:	20 93 64 02 	sts	0x0264, r18	; 0x800264 <accelTimeoutMs>
		// Initialise ATmega SPI
		SPCR = (1<<MSTR)|(0<<SPR0);	// SPI Master, MSB first, POL & PHA both 0, set clock rate fck/2
     876:	90 e1       	ldi	r25, 0x10	; 16
     878:	9c bd       	out	0x2c, r25	; 44
		SPSR = (1<<SPI2X);	// Finish selecting fclk/2, being 512KHz at 1MHz sys clk
     87a:	8d bd       	out	0x2d, r24	; 45
		break;
     87c:	3d c1       	rjmp	.+634    	; 0xaf8 <ACCELEventHandler+0x2bc>
	case EVENT_POSTINIT:
		// Configure ADXL363 for generating wake or brake interrupts
		ACCELWriteReg16(ADXL363_THRESH_ACT_L, BRAKING_ACCELERATION);
     87e:	68 ec       	ldi	r22, 0xC8	; 200
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	80 e2       	ldi	r24, 0x20	; 32
     884:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <ACCELWriteReg16>
		ACCELWriteReg8(ADXL363_TIME_ACT, 10);	// Use 100Hz sampling rate, so require threshold to be exceeded for 0.1 seconds before interrupting
     888:	6a e0       	ldi	r22, 0x0A	; 10
     88a:	82 e2       	ldi	r24, 0x22	; 34
     88c:	0e 94 b4 03 	call	0x768	; 0x768 <ACCELWriteReg8>
		ACCELWriteReg16(ADXL363_THRESH_INACT_L, FORWARD_MOTION);
     890:	6d e7       	ldi	r22, 0x7D	; 125
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	83 e2       	ldi	r24, 0x23	; 35
     896:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <ACCELWriteReg16>
		ACCELWriteReg16(ADXL363_TIME_INACT_L, 10);	// Use 100Hz sampling rate, so require threshold to be exceeded for 0.1 seconds before interrupting
     89a:	6a e0       	ldi	r22, 0x0A	; 10
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	85 e2       	ldi	r24, 0x25	; 37
     8a0:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <ACCELWriteReg16>
		ACCELWriteReg8(ADXL363_ACT_INACT_CTL, 0x03);	// Turn on activity (but not inactivity) and make them relative (to ignore gravity).  Enable default mode
     8a4:	63 e0       	ldi	r22, 0x03	; 3
     8a6:	87 e2       	ldi	r24, 0x27	; 39
     8a8:	0e 94 b4 03 	call	0x768	; 0x768 <ACCELWriteReg8>
		ACCELWriteReg8(ADXL363_INTMAP2, 0x10);	// Map Activity (but not Inactivity) state to INT2
     8ac:	60 e1       	ldi	r22, 0x10	; 16
     8ae:	8b e2       	ldi	r24, 0x2B	; 43
     8b0:	0e 94 b4 03 	call	0x768	; 0x768 <ACCELWriteReg8>
		ACCELWriteReg8(ADXL363_FILTER_CTL, 0x03);	// Set ADXL at 100Hz sampling rate
     8b4:	63 e0       	ldi	r22, 0x03	; 3
     8b6:	8c e2       	ldi	r24, 0x2C	; 44
     8b8:	0e 94 b4 03 	call	0x768	; 0x768 <ACCELWriteReg8>
		ACCELWriteReg8(ADXL363_POWER_CTL, 0x0A);	// Set ADXL into Measurement and Wakeup state
     8bc:	6a e0       	ldi	r22, 0x0A	; 10
     8be:	8d e2       	ldi	r24, 0x2D	; 45
     8c0:	0e 94 b4 03 	call	0x768	; 0x768 <ACCELWriteReg8>
		onBike = false;	// Until we know better
     8c4:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <onBike>
		break;
     8c8:	17 c1       	rjmp	.+558    	; 0xaf8 <ACCELEventHandler+0x2bc>
	case EVENT_TICK:
		if (accelInt) {
     8ca:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <accelInt>
     8ce:	88 23       	and	r24, r24
     8d0:	91 f0       	breq	.+36     	; 0x8f6 <ACCELEventHandler+0xba>
			/*U8 accelStatus = */ACCELReadReg8(ADXL363_STATUS)/* & 0x70*/;	// Read whether we're awake (and acknowledge it as well) as well as Active or Inactive
     8d2:	8b e0       	ldi	r24, 0x0B	; 11
     8d4:	0e 94 cc 03 	call	0x798	; 0x798 <ACCELReadReg8>
			accelInt = false;
     8d8:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <accelInt>
			if (accelState != ACCELSTATE_IGNORING) {
     8dc:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <accelState>
     8e0:	84 30       	cpi	r24, 0x04	; 4
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <ACCELEventHandler+0xaa>
     8e4:	00 c1       	rjmp	.+512    	; 0xae6 <ACCELEventHandler+0x2aa>
				accelState = ACCELSTATE_MONITOR;
     8e6:	83 e0       	ldi	r24, 0x03	; 3
     8e8:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <accelState>
				accelTimeoutMs = eventArg;	// So that it'll immediately monitor the accelerometer
     8ec:	d0 93 65 02 	sts	0x0265, r29	; 0x800265 <accelTimeoutMs+0x1>
     8f0:	c0 93 64 02 	sts	0x0264, r28	; 0x800264 <accelTimeoutMs>
     8f4:	26 c0       	rjmp	.+76     	; 0x942 <ACCELEventHandler+0x106>
			}
		}
		if (accelTimeoutMs > eventArg) {
     8f6:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <accelTimeoutMs>
     8fa:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <accelTimeoutMs+0x1>
     8fe:	68 17       	cp	r22, r24
     900:	79 07       	cpc	r23, r25
     902:	38 f4       	brcc	.+14     	; 0x912 <ACCELEventHandler+0xd6>
			accelTimeoutMs -= eventArg;
     904:	8c 1b       	sub	r24, r28
     906:	9d 0b       	sbc	r25, r29
     908:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <accelTimeoutMs+0x1>
     90c:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <accelTimeoutMs>
     910:	f3 c0       	rjmp	.+486    	; 0xaf8 <ACCELEventHandler+0x2bc>
		} else {
			switch (accelState) {
     912:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <accelState>
     916:	84 30       	cpi	r24, 0x04	; 4
     918:	40 f4       	brcc	.+16     	; 0x92a <ACCELEventHandler+0xee>
     91a:	82 30       	cpi	r24, 0x02	; 2
     91c:	90 f4       	brcc	.+36     	; 0x942 <ACCELEventHandler+0x106>
     91e:	88 23       	and	r24, r24
     920:	09 f4       	brne	.+2      	; 0x924 <ACCELEventHandler+0xe8>
     922:	7f c0       	rjmp	.+254    	; 0xa22 <ACCELEventHandler+0x1e6>
     924:	81 30       	cpi	r24, 0x01	; 1
     926:	21 f0       	breq	.+8      	; 0x930 <ACCELEventHandler+0xf4>
     928:	e7 c0       	rjmp	.+462    	; 0xaf8 <ACCELEventHandler+0x2bc>
     92a:	84 30       	cpi	r24, 0x04	; 4
     92c:	39 f0       	breq	.+14     	; 0x93c <ACCELEventHandler+0x100>
     92e:	e4 c0       	rjmp	.+456    	; 0xaf8 <ACCELEventHandler+0x2bc>
			case ACCELSTATE_INIT:
				ACCELReadReg8(ADXL363_STATUS);	// Read and acknowledge interrupt to complete initialisation
     930:	8b e0       	ldi	r24, 0x0B	; 11
     932:	0e 94 cc 03 	call	0x798	; 0x798 <ACCELReadReg8>
				accelState =  ACCELSTATE_IDLE;
     936:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <accelState>
				break;
     93a:	de c0       	rjmp	.+444    	; 0xaf8 <ACCELEventHandler+0x2bc>
			case ACCELSTATE_IGNORING:
				accelState = ACCELSTATE_IDLE;	// Finished ignoring accelerometer
     93c:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <accelState>
				break;
     940:	db c0       	rjmp	.+438    	; 0xaf8 <ACCELEventHandler+0x2bc>
	return SPDR;	// Return Data Register
}

int ACCELGetAxis(ADXL363_REG reg)	// Use ADXL363_XDATA_L for X, ADXL363_YDATA_L for Y and ADXL363_ZDATA_L for Z
{
	return ACCELReadReg16(reg);	// X = Left / right, Y = Up / Down, Z = Forward / Back
     942:	8e e0       	ldi	r24, 0x0E	; 14
     944:	0e 94 ff 03 	call	0x7fe	; 0x7fe <ACCELReadReg16>
     948:	ec 01       	movw	r28, r24
     94a:	80 e1       	ldi	r24, 0x10	; 16
     94c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <ACCELReadReg16>
     950:	7c 01       	movw	r14, r24
     952:	82 e1       	ldi	r24, 0x12	; 18
     954:	0e 94 ff 03 	call	0x7fe	; 0x7fe <ACCELReadReg16>
     958:	8c 01       	movw	r16, r24
				// Fall through to MONITOR...
			case ACCELSTATE_MONITOR:	//  Monitor accelerometer every 100ms when active.  If Z-axis goes too low for motion for too long (60s?) then issue EVENT_MOTION with False (to indicate stationary).  Otherwise, issue EVENT_MOTION with True (to indicate moving)
				x = ACCELGetAxis(ADXL363_XDATA_L);
				y = ACCELGetAxis(ADXL363_YDATA_L);
				z = ACCELGetAxis(ADXL363_ZDATA_L);
				if ((abs(x) < 200) && (y > 900)) {	// Make sure light is right way up (and thus assumed to be on a bike) before declaring a braking, or a motion event
     95a:	c9 53       	subi	r28, 0x39	; 57
     95c:	df 4f       	sbci	r29, 0xFF	; 255
     95e:	cf 38       	cpi	r28, 0x8F	; 143
     960:	d1 40       	sbci	r29, 0x01	; 1
     962:	08 f0       	brcs	.+2      	; 0x966 <ACCELEventHandler+0x12a>
     964:	4e c0       	rjmp	.+156    	; 0xa02 <ACCELEventHandler+0x1c6>
     966:	95 e8       	ldi	r25, 0x85	; 133
     968:	e9 16       	cp	r14, r25
     96a:	93 e0       	ldi	r25, 0x03	; 3
     96c:	f9 06       	cpc	r15, r25
     96e:	0c f4       	brge	.+2      	; 0x972 <ACCELEventHandler+0x136>
     970:	48 c0       	rjmp	.+144    	; 0xa02 <ACCELEventHandler+0x1c6>
					if (!onBike) OSIssueEvent(EVENT_ONBIKE, true);
     972:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <onBike>
     976:	81 11       	cpse	r24, r1
     978:	05 c0       	rjmp	.+10     	; 0x984 <ACCELEventHandler+0x148>
     97a:	61 e0       	ldi	r22, 0x01	; 1
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	86 e1       	ldi	r24, 0x16	; 22
     980:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
					if (z < -BRAKING_ACCELERATION) {
     984:	08 33       	cpi	r16, 0x38	; 56
     986:	8f ef       	ldi	r24, 0xFF	; 255
     988:	18 07       	cpc	r17, r24
     98a:	4c f4       	brge	.+18     	; 0x99e <ACCELEventHandler+0x162>
						OSIssueEvent(EVENT_BRAKE, 0);	// Less than deceleration (is this right?) to cause a BRAKE event
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	8d e0       	ldi	r24, 0x0D	; 13
     992:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
						accelState = ACCELSTATE_JUSTFIRED;	// Turn LED off next time
     996:	82 e0       	ldi	r24, 0x02	; 2
     998:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <accelState>
     99c:	03 c0       	rjmp	.+6      	; 0x9a4 <ACCELEventHandler+0x168>
					} else accelState = ACCELSTATE_MONITOR;	// Continue monitoring
     99e:	83 e0       	ldi	r24, 0x03	; 3
     9a0:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <accelState>
					if (abs(z) > FORWARD_MOTION) {
     9a4:	c8 01       	movw	r24, r16
     9a6:	99 23       	and	r25, r25
     9a8:	24 f4       	brge	.+8      	; 0x9b2 <ACCELEventHandler+0x176>
     9aa:	88 27       	eor	r24, r24
     9ac:	99 27       	eor	r25, r25
     9ae:	80 1b       	sub	r24, r16
     9b0:	91 0b       	sbc	r25, r17
     9b2:	8e 37       	cpi	r24, 0x7E	; 126
     9b4:	91 05       	cpc	r25, r1
     9b6:	94 f0       	brlt	.+36     	; 0x9dc <ACCELEventHandler+0x1a0>
						if (0 == activityCount) OSIssueEvent(EVENT_MOTION, true);	// If we were stationary previously
     9b8:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__data_end>
     9bc:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <__data_end+0x1>
     9c0:	89 2b       	or	r24, r25
     9c2:	29 f4       	brne	.+10     	; 0x9ce <ACCELEventHandler+0x192>
     9c4:	61 e0       	ldi	r22, 0x01	; 1
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	80 e1       	ldi	r24, 0x10	; 16
     9ca:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
						activityCount = ACTIVITY_TIMEOUT_S * 10;	// We monitor accelerometer 10 times a second, hence the *10
     9ce:	8c e2       	ldi	r24, 0x2C	; 44
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <__data_end+0x1>
     9d6:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <__data_end>
     9da:	1c c0       	rjmp	.+56     	; 0xa14 <ACCELEventHandler+0x1d8>
					} else {
						if (activityCount) {	// Count down activity timeout if not moving
     9dc:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__data_end>
     9e0:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <__data_end+0x1>
     9e4:	00 97       	sbiw	r24, 0x00	; 0
     9e6:	b1 f0       	breq	.+44     	; 0xa14 <ACCELEventHandler+0x1d8>
							if (0 == --activityCount) {
     9e8:	01 97       	sbiw	r24, 0x01	; 1
     9ea:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <__data_end+0x1>
     9ee:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <__data_end>
     9f2:	89 2b       	or	r24, r25
     9f4:	79 f4       	brne	.+30     	; 0xa14 <ACCELEventHandler+0x1d8>
								OSIssueEvent(EVENT_MOTION, false);	// Finally timed out waiting for movement, so admit that we're stationary
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	80 e1       	ldi	r24, 0x10	; 16
     9fc:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
     a00:	09 c0       	rjmp	.+18     	; 0xa14 <ACCELEventHandler+0x1d8>
							}
						}
					}
				} else {	// Not on a bike}
					if (onBike) OSIssueEvent(EVENT_ONBIKE, false);
     a02:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <onBike>
     a06:	88 23       	and	r24, r24
     a08:	29 f0       	breq	.+10     	; 0xa14 <ACCELEventHandler+0x1d8>
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	86 e1       	ldi	r24, 0x16	; 22
     a10:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
				}
				accelTimeoutMs = 100;	// Check motion again in 100ms
     a14:	84 e6       	ldi	r24, 0x64	; 100
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <accelTimeoutMs+0x1>
     a1c:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <accelTimeoutMs>
				break;
     a20:	6b c0       	rjmp	.+214    	; 0xaf8 <ACCELEventHandler+0x2bc>
			case ACCELSTATE_IDLE:
				accelTimeoutMs = 0;
     a22:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <accelTimeoutMs+0x1>
     a26:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <accelTimeoutMs>
				break;
     a2a:	66 c0       	rjmp	.+204    	; 0xaf8 <ACCELEventHandler+0x2bc>
			} // end switch()
		}
		break;
	case EVENT_ONBIKE:
		onBike = (bool)eventArg;
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	cd 2b       	or	r28, r29
     a30:	09 f4       	brne	.+2      	; 0xa34 <ACCELEventHandler+0x1f8>
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <onBike>
		break;
     a38:	5f c0       	rjmp	.+190    	; 0xaf8 <ACCELEventHandler+0x2bc>
	case EVENT_BUTTON:
		accelState = ACCELSTATE_IGNORING;
     a3a:	84 e0       	ldi	r24, 0x04	; 4
     a3c:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <accelState>
		accelTimeoutMs = 2 * MS_PERSEC;	// Disable Accelerometer events while pressing button and for a short while afterwards
     a40:	80 ed       	ldi	r24, 0xD0	; 208
     a42:	97 e0       	ldi	r25, 0x07	; 7
     a44:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <accelTimeoutMs+0x1>
     a48:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <accelTimeoutMs>
		break;
     a4c:	55 c0       	rjmp	.+170    	; 0xaf8 <ACCELEventHandler+0x2bc>
		//OSprintf("ADXL DevId register = 0x%2x\r\n", ACCELReadReg8(ADXL363_DEVID));
		//OSprintf("ADXL_Power_Ctl 0x%2x\r\n", ACCELReadReg8(ADXL363_POWER_CTL));
		//OSprintf("%d, %d, %d\r\n", ACCELReadReg16(ADXL363_XDATA_L), ACCELReadReg16(ADXL363_YDATA_L), ACCELReadReg16(ADXL363_ZDATA_L));	// X = Left / right, Y = Up / Down, Z = Forward / Back
		break;
	case EVENT_REQSLEEP:
		if (ACCELSTATE_IDLE != accelState) *(bool*)eventArg = false;	// Disallow sleep unless we're idle
     a4e:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <accelState>
     a52:	88 23       	and	r24, r24
     a54:	09 f4       	brne	.+2      	; 0xa58 <ACCELEventHandler+0x21c>
     a56:	50 c0       	rjmp	.+160    	; 0xaf8 <ACCELEventHandler+0x2bc>
     a58:	18 82       	st	Y, r1
     a5a:	4e c0       	rjmp	.+156    	; 0xaf8 <ACCELEventHandler+0x2bc>
		break;
	case EVENT_WAKE:
		accelState =  ACCELSTATE_IDLE;	// Ready to handle interrupt
     a5c:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <accelState>
		accelTimeoutMs = 0;
     a60:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <accelTimeoutMs+0x1>
     a64:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <accelTimeoutMs>
		break;
     a68:	47 c0       	rjmp	.+142    	; 0xaf8 <ACCELEventHandler+0x2bc>
	return SPDR;	// Return Data Register
}

int ACCELGetAxis(ADXL363_REG reg)	// Use ADXL363_XDATA_L for X, ADXL363_YDATA_L for Y and ADXL363_ZDATA_L for Z
{
	return ACCELReadReg16(reg);	// X = Left / right, Y = Up / Down, Z = Forward / Back
     a6a:	8e e0       	ldi	r24, 0x0E	; 14
     a6c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <ACCELReadReg16>
     a70:	f8 2e       	mov	r15, r24
     a72:	e9 2e       	mov	r14, r25
     a74:	80 e1       	ldi	r24, 0x10	; 16
     a76:	0e 94 ff 03 	call	0x7fe	; 0x7fe <ACCELReadReg16>
     a7a:	18 2f       	mov	r17, r24
     a7c:	09 2f       	mov	r16, r25
     a7e:	82 e1       	ldi	r24, 0x12	; 18
     a80:	0e 94 ff 03 	call	0x7fe	; 0x7fe <ACCELReadReg16>
     a84:	c8 2f       	mov	r28, r24
     a86:	d9 2f       	mov	r29, r25
	case EVENT_INFO: {
		S16 x,y,z;
		x = ACCELGetAxis(ADXL363_XDATA_L);
		y = ACCELGetAxis(ADXL363_YDATA_L);
		z = ACCELGetAxis(ADXL363_ZDATA_L);
		OSprintf("x = %d\r\n", x);	// X = Left(+) / right, Y = Up(+) / Down, Z = Forward(+) / Back
     a88:	ef 92       	push	r14
     a8a:	ff 92       	push	r15
     a8c:	8a e0       	ldi	r24, 0x0A	; 10
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	9f 93       	push	r25
     a92:	8f 93       	push	r24
     a94:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <OSprintf>
		OSprintf("y = %d\r\n", y);	// X = Left / right, Y = Up / Down, Z = Forward / Back
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	83 e1       	ldi	r24, 0x13	; 19
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	9f 93       	push	r25
     aa2:	8f 93       	push	r24
     aa4:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <OSprintf>
		OSprintf("z = %d\r\n", z);	// X = Left / right, Y = Up / Down, Z = Forward / Back
     aa8:	df 93       	push	r29
     aaa:	cf 93       	push	r28
     aac:	8c e1       	ldi	r24, 0x1C	; 28
     aae:	91 e0       	ldi	r25, 0x01	; 1
     ab0:	9f 93       	push	r25
     ab2:	8f 93       	push	r24
     ab4:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <OSprintf>
		OSprintf("Onbike %d%s", onBike, OS_NEWLINE);
     ab8:	8d ec       	ldi	r24, 0xCD	; 205
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	9f 93       	push	r25
     abe:	8f 93       	push	r24
     ac0:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <onBike>
     ac4:	1f 92       	push	r1
     ac6:	8f 93       	push	r24
     ac8:	85 e2       	ldi	r24, 0x25	; 37
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	9f 93       	push	r25
     ace:	8f 93       	push	r24
     ad0:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <OSprintf>
		} break;
     ad4:	8d b7       	in	r24, 0x3d	; 61
     ad6:	9e b7       	in	r25, 0x3e	; 62
     ad8:	42 96       	adiw	r24, 0x12	; 18
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	f8 94       	cli
     ade:	9e bf       	out	0x3e, r25	; 62
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	8d bf       	out	0x3d, r24	; 61
	default:
		break;	// Does nothing, but stops useless warnings from the compiler
	}
}
     ae4:	09 c0       	rjmp	.+18     	; 0xaf8 <ACCELEventHandler+0x2bc>
			if (accelState != ACCELSTATE_IGNORING) {
				accelState = ACCELSTATE_MONITOR;
				accelTimeoutMs = eventArg;	// So that it'll immediately monitor the accelerometer
			}
		}
		if (accelTimeoutMs > eventArg) {
     ae6:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <accelTimeoutMs>
     aea:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <accelTimeoutMs+0x1>
     aee:	c8 17       	cp	r28, r24
     af0:	d9 07       	cpc	r29, r25
     af2:	08 f0       	brcs	.+2      	; 0xaf6 <ACCELEventHandler+0x2ba>
     af4:	23 cf       	rjmp	.-442    	; 0x93c <ACCELEventHandler+0x100>
     af6:	06 cf       	rjmp	.-500    	; 0x904 <ACCELEventHandler+0xc8>
		OSprintf("Onbike %d%s", onBike, OS_NEWLINE);
		} break;
	default:
		break;	// Does nothing, but stops useless warnings from the compiler
	}
}
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	1f 91       	pop	r17
     afe:	0f 91       	pop	r16
     b00:	ff 90       	pop	r15
     b02:	ef 90       	pop	r14
     b04:	08 95       	ret

00000b06 <ADCGetBatt>:

U16 ADCGetBatt(void)	// Returns ADC reading for battery channel
{
	U16 battVal = 0;

	LEDDisable();	// Stop LEDs while measuring battery
     b06:	0e 94 22 09 	call	0x1244	; 0x1244 <LEDDisable>
	DIDR0 |= BATT_VAL;	// Disable Digital input for ADC6
     b0a:	ee e7       	ldi	r30, 0x7E	; 126
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	80 81       	ld	r24, Z
     b10:	80 64       	ori	r24, 0x40	; 64
     b12:	80 83       	st	Z, r24
	ADMUX = 0x06;	// Select ADC for port ADC6, right-justified result (ADLAR=0)
     b14:	86 e0       	ldi	r24, 0x06	; 6
     b16:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0xC7;	// Enable ADC, using 128 as prescaler
     b1a:	87 ec       	ldi	r24, 0xC7	; 199
     b1c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	while (ADCSRA & 0x40) ;	// Wait for conversion to finish
     b20:	ea e7       	ldi	r30, 0x7A	; 122
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 81       	ld	r24, Z
     b26:	86 fd       	sbrc	r24, 6
     b28:	fd cf       	rjmp	.-6      	; 0xb24 <ADCGetBatt+0x1e>
	ADCSRA = 0xC7;	// Enable ADC, using 128 as prescalers
     b2a:	87 ec       	ldi	r24, 0xC7	; 199
     b2c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	while (ADCSRA & 0x40) ;	// Wait for conversion to finish a second time to get a real reading
     b30:	ea e7       	ldi	r30, 0x7A	; 122
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	80 81       	ld	r24, Z
     b36:	86 fd       	sbrc	r24, 6
     b38:	fd cf       	rjmp	.-6      	; 0xb34 <ADCGetBatt+0x2e>
	battVal = ADCL | (ADCH << 8);	// Sample 10-bit value
     b3a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     b3e:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	ADCSRA = 0x00;	// Shut down ADC to save power
     b42:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	DIDR0 &= ~BATT_VAL;	// Re-enable Digital input for ADC6
     b46:	ee e7       	ldi	r30, 0x7E	; 126
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	90 81       	ld	r25, Z
     b4c:	9f 7b       	andi	r25, 0xBF	; 191
     b4e:	90 83       	st	Z, r25
	return battVal;
     b50:	90 e0       	ldi	r25, 0x00	; 0
}
     b52:	92 2b       	or	r25, r18
     b54:	08 95       	ret

00000b56 <LDRget>:

U16 LDRget(void)	// Returns light level as a percentage, where 100% is bright light
{
	U16 lightLvl = 0;
	
	LEDDisable();	// Stop LEDs while measuring ambient light
     b56:	0e 94 22 09 	call	0x1244	; 0x1244 <LEDDisable>
	DIDR0 |= LDR_VAL;	// Disable Digital input for ADC4
     b5a:	ee e7       	ldi	r30, 0x7E	; 126
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	80 61       	ori	r24, 0x10	; 16
     b62:	80 83       	st	Z, r24
	//DDRF &= ~LDR_EN;	// Enable LDR by making EN an input
	PORTF |= LDR_EN;	// Enable LDR by setting enable line high
     b64:	8d 9a       	sbi	0x11, 5	; 17
	ADMUX = 0x04;	// Select ADC for port ADC4, right-justified result (ADLAR=0)
     b66:	84 e0       	ldi	r24, 0x04	; 4
     b68:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0xC7;	// Enable ADC, using 128 as prescaler
     b6c:	87 ec       	ldi	r24, 0xC7	; 199
     b6e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	while (ADCSRA & 0x40) ;	// Wait for conversion to finish
     b72:	ea e7       	ldi	r30, 0x7A	; 122
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	86 fd       	sbrc	r24, 6
     b7a:	fd cf       	rjmp	.-6      	; 0xb76 <LDRget+0x20>
	ADCSRA = 0xC7;	// Enable ADC, using 128 as prescalers
     b7c:	87 ec       	ldi	r24, 0xC7	; 199
     b7e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	while (ADCSRA & 0x40) ;	// Wait for conversion to finish a second time to get a real reading
     b82:	ea e7       	ldi	r30, 0x7A	; 122
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	86 fd       	sbrc	r24, 6
     b8a:	fd cf       	rjmp	.-6      	; 0xb86 <LDRget+0x30>
	lightLvl = ADCL | (ADCH << 8);	// Sample 10-bit value
     b8c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     b90:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	92 2b       	or	r25, r18
	ADCSRA = 0x00;	// Shut down ADC to save power
     b98:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	DDRF |= LDR_EN;	// Make LDR_EN an output
     b9c:	85 9a       	sbi	0x10, 5	; 16
	PORTF &= ~LDR_EN;	// Disable LDR to save power
     b9e:	8d 98       	cbi	0x11, 5	; 17
	DIDR0 &= ~LDR_VAL;	// Re-enable Digital input for ADC4
     ba0:	ee e7       	ldi	r30, 0x7E	; 126
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	20 81       	ld	r18, Z
     ba6:	2f 7e       	andi	r18, 0xEF	; 239
     ba8:	20 83       	st	Z, r18
	lightLvl = 1024-lightLvl;	// Flip it round, since it's wired to give large readings when dark and low ones when bright
	ldrTimerMs = SAMPLEFREQS_LDR * MS_PERSEC;	// Schedule next background read
     baa:	20 e3       	ldi	r18, 0x30	; 48
     bac:	35 e7       	ldi	r19, 0x75	; 117
     bae:	30 93 69 02 	sts	0x0269, r19	; 0x800269 <ldrTimerMs+0x1>
     bb2:	20 93 68 02 	sts	0x0268, r18	; 0x800268 <ldrTimerMs>
	return (lightLvl / 10);	// Convert to percentage
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	34 e0       	ldi	r19, 0x04	; 4
     bba:	28 1b       	sub	r18, r24
     bbc:	39 0b       	sbc	r19, r25
     bbe:	ad ec       	ldi	r26, 0xCD	; 205
     bc0:	bc ec       	ldi	r27, 0xCC	; 204
     bc2:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__umulhisi3>
}
     bc6:	96 95       	lsr	r25
     bc8:	87 95       	ror	r24
     bca:	96 95       	lsr	r25
     bcc:	87 95       	ror	r24
     bce:	96 95       	lsr	r25
     bd0:	87 95       	ror	r24
     bd2:	08 95       	ret

00000bd4 <ADCEventHandler>:
static U16 ldrVal;	// In 10 bits, so pretty much percentage with 1 decimal place
static S16 temperature;	// In 10 bits, but not sure how to convert the value into Celsius, so not much use...
static U16 ldrTimerMs;	// Time until next light level sample

void ADCEventHandler(Event event, U16 eventArg)
{
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	eb 01       	movw	r28, r22
	switch (event) {
     bda:	85 30       	cpi	r24, 0x05	; 5
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <ADCEventHandler+0xc>
     bde:	ac c0       	rjmp	.+344    	; 0xd38 <ADCEventHandler+0x164>
     be0:	28 f4       	brcc	.+10     	; 0xbec <ADCEventHandler+0x18>
     be2:	81 30       	cpi	r24, 0x01	; 1
     be4:	61 f0       	breq	.+24     	; 0xbfe <ADCEventHandler+0x2a>
     be6:	83 30       	cpi	r24, 0x03	; 3
     be8:	b9 f0       	breq	.+46     	; 0xc18 <ADCEventHandler+0x44>
     bea:	bc c0       	rjmp	.+376    	; 0xd64 <ADCEventHandler+0x190>
     bec:	88 30       	cpi	r24, 0x08	; 8
     bee:	09 f4       	brne	.+2      	; 0xbf2 <ADCEventHandler+0x1e>
     bf0:	9c c0       	rjmp	.+312    	; 0xd2a <ADCEventHandler+0x156>
     bf2:	81 31       	cpi	r24, 0x11	; 17
     bf4:	69 f1       	breq	.+90     	; 0xc50 <ADCEventHandler+0x7c>
     bf6:	86 30       	cpi	r24, 0x06	; 6
     bf8:	09 f0       	breq	.+2      	; 0xbfc <ADCEventHandler+0x28>
     bfa:	b4 c0       	rjmp	.+360    	; 0xd64 <ADCEventHandler+0x190>
     bfc:	8e c0       	rjmp	.+284    	; 0xd1a <ADCEventHandler+0x146>
	case EVENT_INIT:
		ldrVal = NOTANUMBER_U16;
     bfe:	8f ef       	ldi	r24, 0xFF	; 255
     c00:	9f ef       	ldi	r25, 0xFF	; 255
     c02:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <ldrVal+0x1>
     c06:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <ldrVal>
		temperature = NOTANUMBER_S16;	// In 10 bits, but not sure how to convert the value into Celsius, so not much use...
		ldrTimerMs = 1;	// Get ambient light immediately
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <ldrTimerMs+0x1>
     c12:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <ldrTimerMs>
		break;
     c16:	a6 c0       	rjmp	.+332    	; 0xd64 <ADCEventHandler+0x190>
	case EVENT_TICK:
		if (ldrTimerMs) {
     c18:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <ldrTimerMs>
     c1c:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <ldrTimerMs+0x1>
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	09 f4       	brne	.+2      	; 0xc26 <ADCEventHandler+0x52>
     c24:	9f c0       	rjmp	.+318    	; 0xd64 <ADCEventHandler+0x190>
			if (ldrTimerMs > eventArg) {
     c26:	68 17       	cp	r22, r24
     c28:	79 07       	cpc	r23, r25
     c2a:	38 f4       	brcc	.+14     	; 0xc3a <ADCEventHandler+0x66>
				ldrTimerMs -= eventArg;
     c2c:	86 1b       	sub	r24, r22
     c2e:	97 0b       	sbc	r25, r23
     c30:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <ldrTimerMs+0x1>
     c34:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <ldrTimerMs>
     c38:	95 c0       	rjmp	.+298    	; 0xd64 <ADCEventHandler+0x190>
			} else {
				ldrVal = LDRget();
     c3a:	0e 94 ab 05 	call	0xb56	; 0xb56 <LDRget>
     c3e:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <ldrVal+0x1>
     c42:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <ldrVal>
				OSIssueEvent(EVENT_LDR, ldrVal);
     c46:	bc 01       	movw	r22, r24
     c48:	81 e1       	ldi	r24, 0x11	; 17
     c4a:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
     c4e:	8a c0       	rjmp	.+276    	; 0xd64 <ADCEventHandler+0x190>
			}
		}
		break;
	case EVENT_LDR:
	switch (daylight) {
     c50:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <daylight>
     c54:	82 30       	cpi	r24, 0x02	; 2
     c56:	b9 f0       	breq	.+46     	; 0xc86 <ADCEventHandler+0xb2>
     c58:	83 30       	cpi	r24, 0x03	; 3
     c5a:	41 f1       	breq	.+80     	; 0xcac <ADCEventHandler+0xd8>
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	c9 f5       	brne	.+114    	; 0xcd2 <ADCEventHandler+0xfe>
	case DAYTIME_NIGHT:
		if (eventArg > DAY_THRESHOLD + 5) {	// Add some margin for hysteresis
     c60:	6a 31       	cpi	r22, 0x1A	; 26
     c62:	71 05       	cpc	r23, r1
     c64:	30 f0       	brcs	.+12     	; 0xc72 <ADCEventHandler+0x9e>
			OSIssueEvent(EVENT_DAYLIGHT, DAYTIME_DAY);
     c66:	63 e0       	ldi	r22, 0x03	; 3
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	82 e1       	ldi	r24, 0x12	; 18
     c6c:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
     c70:	47 c0       	rjmp	.+142    	; 0xd00 <ADCEventHandler+0x12c>
		} else if (eventArg > DARK_THRESHOLD + 5) {
     c72:	6b 30       	cpi	r22, 0x0B	; 11
     c74:	71 05       	cpc	r23, r1
     c76:	08 f4       	brcc	.+2      	; 0xc7a <ADCEventHandler+0xa6>
     c78:	75 c0       	rjmp	.+234    	; 0xd64 <ADCEventHandler+0x190>
			OSIssueEvent(EVENT_DAYLIGHT, DAYTIME_DUSK);
     c7a:	62 e0       	ldi	r22, 0x02	; 2
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	82 e1       	ldi	r24, 0x12	; 18
     c80:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
     c84:	3d c0       	rjmp	.+122    	; 0xd00 <ADCEventHandler+0x12c>
		} else return;	// else hasn't changed enough, so leave as NIGHT
		break;
	case DAYTIME_DUSK:
		if (eventArg < DARK_THRESHOLD) {
     c86:	65 30       	cpi	r22, 0x05	; 5
     c88:	71 05       	cpc	r23, r1
     c8a:	30 f4       	brcc	.+12     	; 0xc98 <ADCEventHandler+0xc4>
			OSIssueEvent(EVENT_DAYLIGHT, DAYTIME_NIGHT);
     c8c:	61 e0       	ldi	r22, 0x01	; 1
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	82 e1       	ldi	r24, 0x12	; 18
     c92:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
     c96:	34 c0       	rjmp	.+104    	; 0xd00 <ADCEventHandler+0x12c>
		} else if (eventArg > DAY_THRESHOLD + 5) {
     c98:	6a 31       	cpi	r22, 0x1A	; 26
     c9a:	71 05       	cpc	r23, r1
     c9c:	08 f4       	brcc	.+2      	; 0xca0 <ADCEventHandler+0xcc>
     c9e:	62 c0       	rjmp	.+196    	; 0xd64 <ADCEventHandler+0x190>
			OSIssueEvent(EVENT_DAYLIGHT, DAYTIME_DAY);
     ca0:	63 e0       	ldi	r22, 0x03	; 3
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	82 e1       	ldi	r24, 0x12	; 18
     ca6:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
     caa:	2a c0       	rjmp	.+84     	; 0xd00 <ADCEventHandler+0x12c>
		} else return;	// else hasn't changed enough, so leave as DUSK
		break;
	case DAYTIME_DAY:
		if (eventArg < DARK_THRESHOLD) {
     cac:	65 30       	cpi	r22, 0x05	; 5
     cae:	71 05       	cpc	r23, r1
     cb0:	30 f4       	brcc	.+12     	; 0xcbe <ADCEventHandler+0xea>
			OSIssueEvent(EVENT_DAYLIGHT, DAYTIME_NIGHT);
     cb2:	61 e0       	ldi	r22, 0x01	; 1
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	82 e1       	ldi	r24, 0x12	; 18
     cb8:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
     cbc:	21 c0       	rjmp	.+66     	; 0xd00 <ADCEventHandler+0x12c>
		} else if (eventArg < DAY_THRESHOLD) {
     cbe:	64 31       	cpi	r22, 0x14	; 20
     cc0:	71 05       	cpc	r23, r1
     cc2:	08 f0       	brcs	.+2      	; 0xcc6 <ADCEventHandler+0xf2>
     cc4:	4f c0       	rjmp	.+158    	; 0xd64 <ADCEventHandler+0x190>
			OSIssueEvent(EVENT_DAYLIGHT, DAYTIME_DUSK);
     cc6:	62 e0       	ldi	r22, 0x02	; 2
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	82 e1       	ldi	r24, 0x12	; 18
     ccc:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
     cd0:	17 c0       	rjmp	.+46     	; 0xd00 <ADCEventHandler+0x12c>
		} else return;	// else hasn't changed enough, so leave as DAY
		break;
	default:	// In case we didn't have a previous idea of light level
		if (eventArg < DARK_THRESHOLD) {
     cd2:	65 30       	cpi	r22, 0x05	; 5
     cd4:	71 05       	cpc	r23, r1
     cd6:	30 f4       	brcc	.+12     	; 0xce4 <ADCEventHandler+0x110>
			OSIssueEvent(EVENT_DAYLIGHT, DAYTIME_NIGHT);
     cd8:	61 e0       	ldi	r22, 0x01	; 1
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	82 e1       	ldi	r24, 0x12	; 18
     cde:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
     ce2:	0e c0       	rjmp	.+28     	; 0xd00 <ADCEventHandler+0x12c>
		} else if (eventArg > DAY_THRESHOLD) {
     ce4:	65 31       	cpi	r22, 0x15	; 21
     ce6:	71 05       	cpc	r23, r1
     ce8:	30 f0       	brcs	.+12     	; 0xcf6 <ADCEventHandler+0x122>
			OSIssueEvent(EVENT_DAYLIGHT, DAYTIME_DAY);
     cea:	63 e0       	ldi	r22, 0x03	; 3
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	82 e1       	ldi	r24, 0x12	; 18
     cf0:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <ADCEventHandler+0x12c>
		} else {
			OSIssueEvent(EVENT_DAYLIGHT, DAYTIME_DUSK);	// Neither fully night or day
     cf6:	62 e0       	ldi	r22, 0x02	; 2
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	82 e1       	ldi	r24, 0x12	; 18
     cfc:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
		}
		break;
	}
	OSprintf("LDR %d\r\n", eventArg);	// If we get here then we have issued a new daylight event
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	81 e3       	ldi	r24, 0x31	; 49
     d06:	91 e0       	ldi	r25, 0x01	; 1
     d08:	9f 93       	push	r25
     d0a:	8f 93       	push	r24
     d0c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <OSprintf>
	break;
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	25 c0       	rjmp	.+74     	; 0xd64 <ADCEventHandler+0x190>
	case EVENT_REQSLEEP:
		if (NOTANUMBER_U16 == ldrVal) *(bool*)eventArg = false;	// Disallow sleep until we've got a light level
     d1a:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <ldrVal>
     d1e:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <ldrVal+0x1>
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	f9 f4       	brne	.+62     	; 0xd64 <ADCEventHandler+0x190>
     d26:	18 82       	st	Y, r1
     d28:	1d c0       	rjmp	.+58     	; 0xd64 <ADCEventHandler+0x190>
		break;
	case EVENT_WAKE:
		ldrTimerMs = 1;	// Schedule light level whenever we wake up from sleep
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <ldrTimerMs+0x1>
     d32:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <ldrTimerMs>
		break;
     d36:	16 c0       	rjmp	.+44     	; 0xd64 <ADCEventHandler+0x190>
	case EVENT_INFO:
		OSprintf("LDR %d%%%s", ldrVal, OS_NEWLINE);
     d38:	8d ec       	ldi	r24, 0xCD	; 205
     d3a:	91 e0       	ldi	r25, 0x01	; 1
     d3c:	9f 93       	push	r25
     d3e:	8f 93       	push	r24
     d40:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <ldrVal+0x1>
     d44:	8f 93       	push	r24
     d46:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <ldrVal>
     d4a:	8f 93       	push	r24
     d4c:	8a e3       	ldi	r24, 0x3A	; 58
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	9f 93       	push	r25
     d52:	8f 93       	push	r24
     d54:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <OSprintf>
		break;
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
	default:
		break;	// Does nothing, but stops useless warnings from the compiler
	}
}
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	08 95       	ret

00000d6a <BATTGetLevel>:
#define BATT_MAX_RAW (665)	// 669 seen on device with fully-charged battery.  Also seen 697 when LEDs off
#define BATT_RAW_RANGE (BATT_MAX_RAW - BATT_MIN_RAW)

U8 BATTGetLevel(U16 raw)		// Raw is 0-1023 from ADC.  Convert to percentage, where 100% is full, and 50% is half-nominal voltage
{
	if (raw <= BATT_MIN_RAW) {
     d6a:	81 39       	cpi	r24, 0x91	; 145
     d6c:	21 e0       	ldi	r18, 0x01	; 1
     d6e:	92 07       	cpc	r25, r18
     d70:	98 f0       	brcs	.+38     	; 0xd98 <BATTGetLevel+0x2e>
		return 0;
	} else if (raw >= BATT_MAX_RAW) {
     d72:	89 39       	cpi	r24, 0x99	; 153
     d74:	22 e0       	ldi	r18, 0x02	; 2
     d76:	92 07       	cpc	r25, r18
     d78:	88 f4       	brcc	.+34     	; 0xd9c <BATTGetLevel+0x32>
		return 100;
	} else {	// Is inside normal range
		return (U8)(((raw - BATT_MIN_RAW) * 100) / BATT_RAW_RANGE);
     d7a:	44 e6       	ldi	r20, 0x64	; 100
     d7c:	48 9f       	mul	r20, r24
     d7e:	90 01       	movw	r18, r0
     d80:	49 9f       	mul	r20, r25
     d82:	30 0d       	add	r19, r0
     d84:	11 24       	eor	r1, r1
     d86:	c9 01       	movw	r24, r18
     d88:	80 54       	subi	r24, 0x40	; 64
     d8a:	9c 49       	sbci	r25, 0x9C	; 156
     d8c:	69 e0       	ldi	r22, 0x09	; 9
     d8e:	71 e0       	ldi	r23, 0x01	; 1
     d90:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__udivmodhi4>
     d94:	86 2f       	mov	r24, r22
     d96:	08 95       	ret
#define BATT_RAW_RANGE (BATT_MAX_RAW - BATT_MIN_RAW)

U8 BATTGetLevel(U16 raw)		// Raw is 0-1023 from ADC.  Convert to percentage, where 100% is full, and 50% is half-nominal voltage
{
	if (raw <= BATT_MIN_RAW) {
		return 0;
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	08 95       	ret
	} else if (raw >= BATT_MAX_RAW) {
		return 100;
     d9c:	84 e6       	ldi	r24, 0x64	; 100
	} else {	// Is inside normal range
		return (U8)(((raw - BATT_MIN_RAW) * 100) / BATT_RAW_RANGE);
	}
}
     d9e:	08 95       	ret

00000da0 <BATEventHandler>:
static bool usbAttached;
static bool battCharging;
static bool battGood;

void BATEventHandler(Event event, U16 eventArg)
{
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
	switch (event) {
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	fc 01       	movw	r30, r24
     da8:	31 97       	sbiw	r30, 0x01	; 1
     daa:	e5 31       	cpi	r30, 0x15	; 21
     dac:	f1 05       	cpc	r31, r1
     dae:	08 f0       	brcs	.+2      	; 0xdb2 <BATEventHandler+0x12>
     db0:	d0 c0       	rjmp	.+416    	; 0xf52 <BATEventHandler+0x1b2>
     db2:	db 01       	movw	r26, r22
     db4:	e4 59       	subi	r30, 0x94	; 148
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__tablejump2__>
	case EVENT_INIT:
		battPercentage = NOTANUMBER_U16;
     dbc:	8f ef       	ldi	r24, 0xFF	; 255
     dbe:	9f ef       	ldi	r25, 0xFF	; 255
     dc0:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <battPercentage+0x1>
     dc4:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <battPercentage>
		battTimerMs = 1 * MS_PERSEC;
     dc8:	88 ee       	ldi	r24, 0xE8	; 232
     dca:	93 e0       	ldi	r25, 0x03	; 3
     dcc:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <battTimerMs+0x1>
     dd0:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <battTimerMs>
		usbAttached = true;	// Assume if we're starting from power-up, USB must be attached(?)
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <usbAttached>
		battCharging = true;	// Further assume that battery ought to be charging if we're starting, presumably with USB attached(?)
     dda:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <battCharging>
		break;
     dde:	b9 c0       	rjmp	.+370    	; 0xf52 <BATEventHandler+0x1b2>
	case EVENT_TICK:
		if (battTimerMs) {
     de0:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <battTimerMs>
     de4:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <battTimerMs+0x1>
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	09 f1       	breq	.+66     	; 0xe2e <BATEventHandler+0x8e>
			if (battTimerMs > eventArg) {
     dec:	68 17       	cp	r22, r24
     dee:	79 07       	cpc	r23, r25
     df0:	38 f4       	brcc	.+14     	; 0xe00 <BATEventHandler+0x60>
				battTimerMs -= eventArg;
     df2:	86 1b       	sub	r24, r22
     df4:	97 0b       	sbc	r25, r23
     df6:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <battTimerMs+0x1>
     dfa:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <battTimerMs>
     dfe:	17 c0       	rjmp	.+46     	; 0xe2e <BATEventHandler+0x8e>
			} else {
				battRaw = ADCGetBatt();
     e00:	0e 94 83 05 	call	0xb06	; 0xb06 <ADCGetBatt>
     e04:	90 93 72 02 	sts	0x0272, r25	; 0x800272 <battRaw+0x1>
     e08:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <battRaw>
				battPercentage = BATTGetLevel(battRaw);
     e0c:	0e 94 b5 06 	call	0xd6a	; 0xd6a <BATTGetLevel>
     e10:	68 2f       	mov	r22, r24
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	70 93 70 02 	sts	0x0270, r23	; 0x800270 <battPercentage+0x1>
     e18:	60 93 6f 02 	sts	0x026F, r22	; 0x80026f <battPercentage>
				OSIssueEvent(EVENT_BATTERY, battPercentage);
     e1c:	83 e1       	ldi	r24, 0x13	; 19
     e1e:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
				battTimerMs = (U16)SAMPLEFREQS_BATT * (U16)MS_PERSEC;
     e22:	80 e6       	ldi	r24, 0x60	; 96
     e24:	9a ee       	ldi	r25, 0xEA	; 234
     e26:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <battTimerMs+0x1>
     e2a:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <battTimerMs>
			}
		}
		if (usbAttached) {
     e2e:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <usbAttached>
     e32:	88 23       	and	r24, r24
     e34:	09 f4       	brne	.+2      	; 0xe38 <BATEventHandler+0x98>
     e36:	8d c0       	rjmp	.+282    	; 0xf52 <BATEventHandler+0x1b2>
			bool newCharging = (0 != (PORTE & 0x40));
     e38:	6e b1       	in	r22, 0x0e	; 14
     e3a:	66 fb       	bst	r22, 6
     e3c:	66 27       	eor	r22, r22
     e3e:	60 f9       	bld	r22, 0
			if (newCharging != battCharging) {
     e40:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <battCharging>
     e44:	68 17       	cp	r22, r24
     e46:	09 f4       	brne	.+2      	; 0xe4a <BATEventHandler+0xaa>
     e48:	84 c0       	rjmp	.+264    	; 0xf52 <BATEventHandler+0x1b2>
				OSIssueEvent(EVENT_CHARGING, newCharging);	// We've just changed between charging and not charging
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	84 e1       	ldi	r24, 0x14	; 20
     e4e:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
     e52:	7f c0       	rjmp	.+254    	; 0xf52 <BATEventHandler+0x1b2>
			}
		}
		break;
	case EVENT_CHARGING:
		if (eventArg) CHG_LED_ON; else CHG_LED_OFF;	// Indicator LED shows Charging state
     e54:	10 97       	sbiw	r26, 0x00	; 0
     e56:	11 f0       	breq	.+4      	; 0xe5c <BATEventHandler+0xbc>
     e58:	88 9a       	sbi	0x11, 0	; 17
     e5a:	01 c0       	rjmp	.+2      	; 0xe5e <BATEventHandler+0xbe>
     e5c:	88 98       	cbi	0x11, 0	; 17
		battCharging = eventArg;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	ab 2b       	or	r26, r27
     e62:	09 f4       	brne	.+2      	; 0xe66 <BATEventHandler+0xc6>
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <battCharging>
		break;
     e6a:	73 c0       	rjmp	.+230    	; 0xf52 <BATEventHandler+0x1b2>
	case EVENT_BATTERY:
		if ((eventArg < 10) && battGood) {
     e6c:	6a 30       	cpi	r22, 0x0A	; 10
     e6e:	71 05       	cpc	r23, r1
     e70:	50 f4       	brcc	.+20     	; 0xe86 <BATEventHandler+0xe6>
     e72:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <battGood>
     e76:	88 23       	and	r24, r24
     e78:	51 f0       	breq	.+20     	; 0xe8e <BATEventHandler+0xee>
			OSIssueEvent(EVENT_BATTGOOD, false);
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	85 e1       	ldi	r24, 0x15	; 21
     e80:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
     e84:	66 c0       	rjmp	.+204    	; 0xf52 <BATEventHandler+0x1b2>
		} else if (!battGood && (eventArg > 15)) {	// Note anti-hysteresis, using <10% for bad and >15% for good
     e86:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <battGood>
     e8a:	81 11       	cpse	r24, r1
     e8c:	62 c0       	rjmp	.+196    	; 0xf52 <BATEventHandler+0x1b2>
     e8e:	50 97       	sbiw	r26, 0x10	; 16
     e90:	08 f4       	brcc	.+2      	; 0xe94 <BATEventHandler+0xf4>
     e92:	5f c0       	rjmp	.+190    	; 0xf52 <BATEventHandler+0x1b2>
			OSIssueEvent(EVENT_BATTGOOD, true);
     e94:	61 e0       	ldi	r22, 0x01	; 1
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	85 e1       	ldi	r24, 0x15	; 21
     e9a:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
     e9e:	59 c0       	rjmp	.+178    	; 0xf52 <BATEventHandler+0x1b2>
		}
		break;
	case EVENT_BATTGOOD:
		battGood = eventArg;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	ab 2b       	or	r26, r27
     ea4:	09 f4       	brne	.+2      	; 0xea8 <BATEventHandler+0x108>
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <battGood>
		break;
     eac:	52 c0       	rjmp	.+164    	; 0xf52 <BATEventHandler+0x1b2>
	case EVENT_USB:
		usbAttached = eventArg;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	10 97       	sbiw	r26, 0x00	; 0
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <BATEventHandler+0x116>
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <usbAttached>
		if (!eventArg) {
     eba:	ab 2b       	or	r26, r27
     ebc:	09 f0       	breq	.+2      	; 0xec0 <BATEventHandler+0x120>
     ebe:	49 c0       	rjmp	.+146    	; 0xf52 <BATEventHandler+0x1b2>
			OSIssueEvent(EVENT_CHARGING, false);	// Can't be charging if USB removed
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	84 e1       	ldi	r24, 0x14	; 20
     ec6:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
			LEDShowPercentage(battPercentage);		// And then display battery voltage via main LEDs
     eca:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <battPercentage>
     ece:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <battPercentage+0x1>
     ed2:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <LEDShowPercentage>
     ed6:	3d c0       	rjmp	.+122    	; 0xf52 <BATEventHandler+0x1b2>
		}
		break;
	case EVENT_DOUBLE_CLICK:
		if (NOTANUMBER_U16 != battPercentage) {
     ed8:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <battPercentage>
     edc:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <battPercentage+0x1>
     ee0:	8f 3f       	cpi	r24, 0xFF	; 255
     ee2:	2f ef       	ldi	r18, 0xFF	; 255
     ee4:	92 07       	cpc	r25, r18
     ee6:	a9 f1       	breq	.+106    	; 0xf52 <BATEventHandler+0x1b2>
			LEDShowPercentage(battPercentage);		// Display battery voltage via main LEDs
     ee8:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <LEDShowPercentage>
     eec:	32 c0       	rjmp	.+100    	; 0xf52 <BATEventHandler+0x1b2>
		}
		break;
	case EVENT_REQSLEEP:
		if (NOTANUMBER_U16 == battPercentage) *(bool*)eventArg = false;	// Disallow sleep until we've got a battery reading
     eee:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <battPercentage>
     ef2:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <battPercentage+0x1>
     ef6:	01 96       	adiw	r24, 0x01	; 1
     ef8:	61 f5       	brne	.+88     	; 0xf52 <BATEventHandler+0x1b2>
     efa:	1c 92       	st	X, r1
     efc:	2a c0       	rjmp	.+84     	; 0xf52 <BATEventHandler+0x1b2>
		break;
	case EVENT_INFO:
		OSprintf("Batt %d%% (raw %d)%s", battPercentage, battRaw, OS_NEWLINE);
     efe:	cd ec       	ldi	r28, 0xCD	; 205
     f00:	d1 e0       	ldi	r29, 0x01	; 1
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <battRaw+0x1>
     f0a:	8f 93       	push	r24
     f0c:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <battRaw>
     f10:	8f 93       	push	r24
     f12:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <battPercentage+0x1>
     f16:	8f 93       	push	r24
     f18:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <battPercentage>
     f1c:	8f 93       	push	r24
     f1e:	85 e4       	ldi	r24, 0x45	; 69
     f20:	91 e0       	ldi	r25, 0x01	; 1
     f22:	9f 93       	push	r25
     f24:	8f 93       	push	r24
     f26:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <OSprintf>
		OSprintf("Charging %d%s", battCharging, OS_NEWLINE);
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <battCharging>
     f32:	1f 92       	push	r1
     f34:	8f 93       	push	r24
     f36:	8a e5       	ldi	r24, 0x5A	; 90
     f38:	91 e0       	ldi	r25, 0x01	; 1
     f3a:	9f 93       	push	r25
     f3c:	8f 93       	push	r24
     f3e:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <OSprintf>
		break;
     f42:	8d b7       	in	r24, 0x3d	; 61
     f44:	9e b7       	in	r25, 0x3e	; 62
     f46:	0e 96       	adiw	r24, 0x0e	; 14
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	f8 94       	cli
     f4c:	9e bf       	out	0x3e, r25	; 62
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	8d bf       	out	0x3d, r24	; 61
	default:
		break;	// Does nothing, but stops useless warnings from the compiler
	}
}
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	08 95       	ret

00000f58 <__vector_1>:
static bool btnDown;	// true when down
static U16 btnTimerMs;	// Time of button being kept in same state
static BtnState btnState;

ISR(INT0_vect)	// Button edge detected
{
     f58:	1f 92       	push	r1
     f5a:	0f 92       	push	r0
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	0f 92       	push	r0
     f60:	11 24       	eor	r1, r1
     f62:	8f 93       	push	r24
	btnDown = (0 != BTN);	// Read button as true when down
     f64:	89 b1       	in	r24, 0x09	; 9
     f66:	81 70       	andi	r24, 0x01	; 1
     f68:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <btnDown>
	//if (btnDown) { BTN_LED_ON; } else { BTN_LED_OFF; }	// For debugging
	btnInt = true;
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <btnInt>
}
     f72:	8f 91       	pop	r24
     f74:	0f 90       	pop	r0
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	0f 90       	pop	r0
     f7a:	1f 90       	pop	r1
     f7c:	18 95       	reti

00000f7e <BTNEventHandler>:

void BTNEventHandler(Event event, U16 eventArg)
{
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
	switch (event) {
     f82:	86 30       	cpi	r24, 0x06	; 6
     f84:	09 f4       	brne	.+2      	; 0xf88 <BTNEventHandler+0xa>
     f86:	af c0       	rjmp	.+350    	; 0x10e6 <BTNEventHandler+0x168>
     f88:	eb 01       	movw	r28, r22
     f8a:	87 30       	cpi	r24, 0x07	; 7
     f8c:	28 f4       	brcc	.+10     	; 0xf98 <BTNEventHandler+0x1a>
     f8e:	82 30       	cpi	r24, 0x02	; 2
     f90:	51 f0       	breq	.+20     	; 0xfa6 <BTNEventHandler+0x28>
     f92:	83 30       	cpi	r24, 0x03	; 3
     f94:	69 f0       	breq	.+26     	; 0xfb0 <BTNEventHandler+0x32>
     f96:	b9 c0       	rjmp	.+370    	; 0x110a <BTNEventHandler+0x18c>
     f98:	89 30       	cpi	r24, 0x09	; 9
     f9a:	09 f4       	brne	.+2      	; 0xf9e <BTNEventHandler+0x20>
     f9c:	65 c0       	rjmp	.+202    	; 0x1068 <BTNEventHandler+0xea>
     f9e:	8b 30       	cpi	r24, 0x0B	; 11
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <BTNEventHandler+0x26>
     fa2:	99 c0       	rjmp	.+306    	; 0x10d6 <BTNEventHandler+0x158>
     fa4:	b2 c0       	rjmp	.+356    	; 0x110a <BTNEventHandler+0x18c>
	case EVENT_POSTINIT:
		btnInt = false;
     fa6:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <btnInt>
		btnState = BTNSTATE_IDLE;
     faa:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <btnState>
		break;
     fae:	ad c0       	rjmp	.+346    	; 0x110a <BTNEventHandler+0x18c>
	case EVENT_TICK:
		if (btnInt) {
     fb0:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <btnInt>
     fb4:	88 23       	and	r24, r24
     fb6:	69 f0       	breq	.+26     	; 0xfd2 <BTNEventHandler+0x54>
			btnInt = false;	// So that we don't continue to trigger
     fb8:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <btnInt>
			if (BTNSTATE_IGNORE != btnState) OSIssueEvent(EVENT_BUTTON, btnDown);	// btnDown value set directly from ISR
     fbc:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <btnState>
     fc0:	85 30       	cpi	r24, 0x05	; 5
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <BTNEventHandler+0x48>
     fc4:	97 c0       	rjmp	.+302    	; 0x10f4 <BTNEventHandler+0x176>
     fc6:	60 91 78 02 	lds	r22, 0x0278	; 0x800278 <btnDown>
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	89 e0       	ldi	r24, 0x09	; 9
     fce:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
		}
		if (BTNSTATE_IDLE != btnState) {	// Only think about button if not idle
     fd2:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <btnState>
     fd6:	88 23       	and	r24, r24
     fd8:	09 f4       	brne	.+2      	; 0xfdc <BTNEventHandler+0x5e>
     fda:	97 c0       	rjmp	.+302    	; 0x110a <BTNEventHandler+0x18c>
			btnTimerMs += eventArg;	// Time how long button stays in same state
     fdc:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <btnTimerMs>
     fe0:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <btnTimerMs+0x1>
     fe4:	6c 0f       	add	r22, r28
     fe6:	7d 1f       	adc	r23, r29
     fe8:	70 93 77 02 	sts	0x0277, r23	; 0x800277 <btnTimerMs+0x1>
     fec:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <btnTimerMs>
			switch (btnState) {
     ff0:	83 30       	cpi	r24, 0x03	; 3
     ff2:	61 f1       	breq	.+88     	; 0x104c <BTNEventHandler+0xce>
     ff4:	28 f4       	brcc	.+10     	; 0x1000 <BTNEventHandler+0x82>
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	49 f0       	breq	.+18     	; 0x100c <BTNEventHandler+0x8e>
     ffa:	82 30       	cpi	r24, 0x02	; 2
     ffc:	d9 f0       	breq	.+54     	; 0x1034 <BTNEventHandler+0xb6>
     ffe:	85 c0       	rjmp	.+266    	; 0x110a <BTNEventHandler+0x18c>
    1000:	84 30       	cpi	r24, 0x04	; 4
    1002:	61 f0       	breq	.+24     	; 0x101c <BTNEventHandler+0x9e>
    1004:	85 30       	cpi	r24, 0x05	; 5
    1006:	09 f0       	breq	.+2      	; 0x100a <BTNEventHandler+0x8c>
    1008:	80 c0       	rjmp	.+256    	; 0x110a <BTNEventHandler+0x18c>
    100a:	27 c0       	rjmp	.+78     	; 0x105a <BTNEventHandler+0xdc>
			case BTNSTATE_FIRSTPRESS:	// Time when button pressed initially
				if (btnTimerMs > BTN_CLICKMS) {
    100c:	65 3f       	cpi	r22, 0xF5	; 245
    100e:	71 40       	sbci	r23, 0x01	; 1
    1010:	08 f4       	brcc	.+2      	; 0x1014 <BTNEventHandler+0x96>
    1012:	7b c0       	rjmp	.+246    	; 0x110a <BTNEventHandler+0x18c>
					btnState = BTNSTATE_FIRSTHOLD;	// No longer measuring Click time, because it's been held down too long, but might not count as long press either yet...
    1014:	84 e0       	ldi	r24, 0x04	; 4
    1016:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <btnState>
    101a:	77 c0       	rjmp	.+238    	; 0x110a <BTNEventHandler+0x18c>
				}
				break;
			case BTNSTATE_FIRSTHOLD:	// Time when button pressed and held
				if (btnTimerMs > BTN_HOLDMS)	{	// Read timer as button is held down
    101c:	69 3e       	cpi	r22, 0xE9	; 233
    101e:	73 40       	sbci	r23, 0x03	; 3
    1020:	08 f4       	brcc	.+2      	; 0x1024 <BTNEventHandler+0xa6>
    1022:	73 c0       	rjmp	.+230    	; 0x110a <BTNEventHandler+0x18c>
					OSIssueEvent(EVENT_LONG_CLICK, 0);
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	8c e0       	ldi	r24, 0x0C	; 12
    102a:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
					btnState = BTNSTATE_IDLE;
    102e:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <btnState>
    1032:	6b c0       	rjmp	.+214    	; 0x110a <BTNEventHandler+0x18c>
				}
				break;
			case BTNSTATE_FIRSTRELEASE:	// Time when Button released after first press...
				if (btnTimerMs > BTN_CLICKMS) {	// Use same length of time for release as for initial press
    1034:	65 3f       	cpi	r22, 0xF5	; 245
    1036:	71 40       	sbci	r23, 0x01	; 1
    1038:	08 f4       	brcc	.+2      	; 0x103c <BTNEventHandler+0xbe>
    103a:	67 c0       	rjmp	.+206    	; 0x110a <BTNEventHandler+0x18c>
					OSIssueEvent(EVENT_SINGLE_CLICK, 0);	// Not start of double-click, so must be single click
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	8a e0       	ldi	r24, 0x0A	; 10
    1042:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
					btnState = BTNSTATE_IDLE;
    1046:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <btnState>
    104a:	5f c0       	rjmp	.+190    	; 0x110a <BTNEventHandler+0x18c>
				}
				break;
			case BTNSTATE_SECONDPRESS:	// Button pressed soon again after earlier tap
				if (btnTimerMs > BTN_CLICKMS) {	// Use same length of time for release as for initial press
    104c:	65 3f       	cpi	r22, 0xF5	; 245
    104e:	71 40       	sbci	r23, 0x01	; 1
    1050:	08 f4       	brcc	.+2      	; 0x1054 <BTNEventHandler+0xd6>
    1052:	5b c0       	rjmp	.+182    	; 0x110a <BTNEventHandler+0x18c>
					btnState = BTNSTATE_IDLE;	// If second press is too long, then ignore
    1054:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <btnState>
    1058:	58 c0       	rjmp	.+176    	; 0x110a <BTNEventHandler+0x18c>
				}
				break;
			case BTNSTATE_IGNORE:
				if (btnTimerMs > BTN_IGNOREMS) {
    105a:	69 3e       	cpi	r22, 0xE9	; 233
    105c:	73 40       	sbci	r23, 0x03	; 3
    105e:	08 f4       	brcc	.+2      	; 0x1062 <BTNEventHandler+0xe4>
    1060:	54 c0       	rjmp	.+168    	; 0x110a <BTNEventHandler+0x18c>
					btnState = BTNSTATE_IDLE;	// Once we've stopped ignoring, go back to Idle
    1062:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <btnState>
    1066:	51 c0       	rjmp	.+162    	; 0x110a <BTNEventHandler+0x18c>
				break;	// Does nothing, but stops useless warnings from the compiler
			}
		}
		break;
	case EVENT_BUTTON:
		btnTimerMs = 0;	// Start timer if just pressed or just released
    1068:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <btnTimerMs+0x1>
    106c:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <btnTimerMs>
		if (eventArg) { BTN_LED_ON; } else { BTN_LED_OFF; }	// For debugging
		switch (btnState) {
    1070:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <btnState>
    1074:	82 30       	cpi	r24, 0x02	; 2
    1076:	d1 f0       	breq	.+52     	; 0x10ac <BTNEventHandler+0x12e>
    1078:	28 f4       	brcc	.+10     	; 0x1084 <BTNEventHandler+0x106>
    107a:	88 23       	and	r24, r24
    107c:	41 f0       	breq	.+16     	; 0x108e <BTNEventHandler+0x110>
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	69 f0       	breq	.+26     	; 0x109c <BTNEventHandler+0x11e>
    1082:	43 c0       	rjmp	.+134    	; 0x110a <BTNEventHandler+0x18c>
    1084:	83 30       	cpi	r24, 0x03	; 3
    1086:	d1 f0       	breq	.+52     	; 0x10bc <BTNEventHandler+0x13e>
    1088:	84 30       	cpi	r24, 0x04	; 4
    108a:	11 f1       	breq	.+68     	; 0x10d0 <BTNEventHandler+0x152>
    108c:	3e c0       	rjmp	.+124    	; 0x110a <BTNEventHandler+0x18c>
		case BTNSTATE_IDLE:
			btnState = (eventArg) ? BTNSTATE_FIRSTPRESS : BTNSTATE_IDLE;	// If pressed when Idle, advance to FirstPress
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	cd 2b       	or	r28, r29
    1092:	09 f4       	brne	.+2      	; 0x1096 <BTNEventHandler+0x118>
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <btnState>
			break;
    109a:	37 c0       	rjmp	.+110    	; 0x110a <BTNEventHandler+0x18c>
		case BTNSTATE_FIRSTPRESS:
			btnState = (!eventArg) ? BTNSTATE_FIRSTRELEASE : BTNSTATE_IDLE;	// If released during FirstPress, advance to FirstRelease
    109c:	cd 2b       	or	r28, r29
    109e:	11 f0       	breq	.+4      	; 0x10a4 <BTNEventHandler+0x126>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	01 c0       	rjmp	.+2      	; 0x10a6 <BTNEventHandler+0x128>
    10a4:	82 e0       	ldi	r24, 0x02	; 2
    10a6:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <btnState>
			break;
    10aa:	2f c0       	rjmp	.+94     	; 0x110a <BTNEventHandler+0x18c>
		case BTNSTATE_FIRSTRELEASE:
			btnState = (eventArg) ? BTNSTATE_SECONDPRESS : BTNSTATE_IDLE;	// If pressed during FirstRelease, advance to SecondPress
    10ac:	cd 2b       	or	r28, r29
    10ae:	11 f4       	brne	.+4      	; 0x10b4 <BTNEventHandler+0x136>
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	01 c0       	rjmp	.+2      	; 0x10b6 <BTNEventHandler+0x138>
    10b4:	83 e0       	ldi	r24, 0x03	; 3
    10b6:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <btnState>
			break;
    10ba:	27 c0       	rjmp	.+78     	; 0x110a <BTNEventHandler+0x18c>
		case BTNSTATE_SECONDPRESS:
			if (!eventArg) {
    10bc:	cd 2b       	or	r28, r29
    10be:	29 f4       	brne	.+10     	; 0x10ca <BTNEventHandler+0x14c>
				OSIssueEvent(EVENT_DOUBLE_CLICK, 0);	// If released during SecondPress, issue DoubleClick
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	8b e0       	ldi	r24, 0x0B	; 11
    10c6:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
			}
			btnState = BTNSTATE_IDLE;	// Idle regardless
    10ca:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <btnState>
			break;
    10ce:	1d c0       	rjmp	.+58     	; 0x110a <BTNEventHandler+0x18c>
		case BTNSTATE_FIRSTHOLD:
			btnState = BTNSTATE_IDLE;	// Released during Hold timing, but before held long enough, so ignore
    10d0:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <btnState>
			break;
    10d4:	1a c0       	rjmp	.+52     	; 0x110a <BTNEventHandler+0x18c>
		default:
			break;
		}
		break;
	case EVENT_DOUBLE_CLICK:
		btnState = BTNSTATE_IGNORE;	// Ignore clicks immediately after a double click, since that'll be nervous taps
    10d6:	85 e0       	ldi	r24, 0x05	; 5
    10d8:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <btnState>
		btnTimerMs = 0;	// Start timer when ignoring
    10dc:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <btnTimerMs+0x1>
    10e0:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <btnTimerMs>
		break;
    10e4:	12 c0       	rjmp	.+36     	; 0x110a <BTNEventHandler+0x18c>
	case EVENT_REQSLEEP:
		if (BTNSTATE_IDLE != btnState) *(bool*)eventArg = false;	// Disallow sleep while button in use
    10e6:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <btnState>
    10ea:	88 23       	and	r24, r24
    10ec:	71 f0       	breq	.+28     	; 0x110a <BTNEventHandler+0x18c>
    10ee:	fb 01       	movw	r30, r22
    10f0:	10 82       	st	Z, r1
		break;
	default:
		break;	// Does nothing, but stops useless warnings from the compiler
	}
}
    10f2:	0b c0       	rjmp	.+22     	; 0x110a <BTNEventHandler+0x18c>
		if (btnInt) {
			btnInt = false;	// So that we don't continue to trigger
			if (BTNSTATE_IGNORE != btnState) OSIssueEvent(EVENT_BUTTON, btnDown);	// btnDown value set directly from ISR
		}
		if (BTNSTATE_IDLE != btnState) {	// Only think about button if not idle
			btnTimerMs += eventArg;	// Time how long button stays in same state
    10f4:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <btnTimerMs>
    10f8:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <btnTimerMs+0x1>
    10fc:	6c 0f       	add	r22, r28
    10fe:	7d 1f       	adc	r23, r29
    1100:	70 93 77 02 	sts	0x0277, r23	; 0x800277 <btnTimerMs+0x1>
    1104:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <btnTimerMs>
    1108:	a8 cf       	rjmp	.-176    	; 0x105a <BTNEventHandler+0xdc>
		if (BTNSTATE_IDLE != btnState) *(bool*)eventArg = false;	// Disallow sleep while button in use
		break;
	default:
		break;	// Does nothing, but stops useless warnings from the compiler
	}
}
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	08 95       	ret

00001110 <LEDStartPattern>:
	return series;
}

int LEDStartPattern(int pattern)	// A Pattern of Rows, with LED levels, a fade and a hold.  Assumes ledPatternTable set up from LEDStartSeries()
{
	if (NULL == ledPatternTable[pattern].pattern) pattern = 0;	// Restart patternIndex if we fall off the end of the table
    1110:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <ledPatternTable>
    1114:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <ledPatternTable+0x1>
    1118:	dc 01       	movw	r26, r24
    111a:	aa 0f       	add	r26, r26
    111c:	bb 1f       	adc	r27, r27
    111e:	a8 0f       	add	r26, r24
    1120:	b9 1f       	adc	r27, r25
    1122:	a2 0f       	add	r26, r18
    1124:	b3 1f       	adc	r27, r19
    1126:	4d 91       	ld	r20, X+
    1128:	5c 91       	ld	r21, X
    112a:	45 2b       	or	r20, r21
    112c:	11 f4       	brne	.+4      	; 0x1132 <LEDStartPattern+0x22>
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	90 e0       	ldi	r25, 0x00	; 0
	ledBackgroundTop = ledPatternTable[pattern].pattern;
    1132:	fc 01       	movw	r30, r24
    1134:	ee 0f       	add	r30, r30
    1136:	ff 1f       	adc	r31, r31
    1138:	e8 0f       	add	r30, r24
    113a:	f9 1f       	adc	r31, r25
    113c:	e2 0f       	add	r30, r18
    113e:	f3 1f       	adc	r31, r19
    1140:	20 81       	ld	r18, Z
    1142:	31 81       	ldd	r19, Z+1	; 0x01
    1144:	30 93 85 02 	sts	0x0285, r19	; 0x800285 <ledBackgroundTop+0x1>
    1148:	20 93 84 02 	sts	0x0284, r18	; 0x800284 <ledBackgroundTop>
	ledPatternCycles = ledPatternTable[pattern].cycles;
    114c:	42 81       	ldd	r20, Z+2	; 0x02
    114e:	40 93 88 02 	sts	0x0288, r20	; 0x800288 <ledPatternCycles>
	ledOverride = NULL;	// No override by default
	ledRow = ledBackgroundTop;	// Start at top of table
    1152:	30 93 83 02 	sts	0x0283, r19	; 0x800283 <ledRow+0x1>
    1156:	20 93 82 02 	sts	0x0282, r18	; 0x800282 <ledRow>
	ledState = (NULL != ledRow) ? LEDSTATE_PREPAREROW : LEDSTATE_IDLE;
    115a:	41 e0       	ldi	r20, 0x01	; 1
    115c:	23 2b       	or	r18, r19
    115e:	09 f4       	brne	.+2      	; 0x1162 <LEDStartPattern+0x52>
    1160:	40 e0       	ldi	r20, 0x00	; 0
    1162:	40 93 8e 02 	sts	0x028E, r20	; 0x80028e <ledState>
	return pattern;
}
    1166:	08 95       	ret

00001168 <LEDStartSeries>:
		break;	// Does nothing, but stops useless warnings from the compiler
	}
}

int LEDStartSeries(int series)	// A Series of Patterns
{
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
    116c:	ec 01       	movw	r28, r24
	if (NULL == ledSeries[series]) series = 0;	// Restart series
    116e:	fc 01       	movw	r30, r24
    1170:	ee 0f       	add	r30, r30
    1172:	ff 1f       	adc	r31, r31
    1174:	e0 50       	subi	r30, 0x00	; 0
    1176:	ff 4f       	sbci	r31, 0xFF	; 255
    1178:	80 81       	ld	r24, Z
    117a:	91 81       	ldd	r25, Z+1	; 0x01
    117c:	89 2b       	or	r24, r25
    117e:	11 f4       	brne	.+4      	; 0x1184 <LEDStartSeries+0x1c>
    1180:	c0 e0       	ldi	r28, 0x00	; 0
    1182:	d0 e0       	ldi	r29, 0x00	; 0
	ledPatternTable = ledSeries[series];
    1184:	fe 01       	movw	r30, r28
    1186:	ee 0f       	add	r30, r30
    1188:	ff 1f       	adc	r31, r31
    118a:	e0 50       	subi	r30, 0x00	; 0
    118c:	ff 4f       	sbci	r31, 0xFF	; 255
    118e:	80 81       	ld	r24, Z
    1190:	91 81       	ldd	r25, Z+1	; 0x01
    1192:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <ledPatternTable+0x1>
    1196:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <ledPatternTable>
	ledPatternIndex = LEDStartPattern(0);	// Start first pattern in series
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0e 94 88 08 	call	0x1110	; 0x1110 <LEDStartPattern>
    11a2:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <ledPatternIndex>
	ledPlayingSeries = series;	// Keep a track of which series we're playing now
    11a6:	c0 93 8d 02 	sts	0x028D, r28	; 0x80028d <ledPlayingSeries>
	return series;
}
    11aa:	ce 01       	movw	r24, r28
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	08 95       	ret

000011b2 <LEDOverride>:

void LEDOverride(const LED_ROW* ledTable)
{
	// Leave ledBackgroundTop as it was, so we can restore to it when override is done
	ledOverride = (LED_ROW*)ledTable;
	ledRow = (LED_ROW*)ledTable;	// Start at top of table
    11b2:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <ledRow+0x1>
    11b6:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <ledRow>
	ledState = LEDSTATE_PREPAREROW;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <ledState>
    11c0:	08 95       	ret

000011c2 <LEDShowPercentage>:
	return pattern;
}

void LEDShowPercentage(U16 val)
{
	if (val > 92) {	// Anything over 100% is treated as 100%
    11c2:	8d 35       	cpi	r24, 0x5D	; 93
    11c4:	91 05       	cpc	r25, r1
    11c6:	28 f0       	brcs	.+10     	; 0x11d2 <LEDShowPercentage+0x10>
		LEDOverride(LedLevel100);
    11c8:	84 e1       	ldi	r24, 0x14	; 20
    11ca:	92 e0       	ldi	r25, 0x02	; 2
    11cc:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LEDOverride>
    11d0:	08 95       	ret
	} else if ((val <= 92) && (val > 76)) {	// 1/12th either side
    11d2:	9c 01       	movw	r18, r24
    11d4:	2d 54       	subi	r18, 0x4D	; 77
    11d6:	31 09       	sbc	r19, r1
    11d8:	20 31       	cpi	r18, 0x10	; 16
    11da:	31 05       	cpc	r19, r1
    11dc:	28 f4       	brcc	.+10     	; 0x11e8 <LEDShowPercentage+0x26>
		LEDOverride(LedLevel84);	// 5/6
    11de:	86 ee       	ldi	r24, 0xE6	; 230
    11e0:	92 e0       	ldi	r25, 0x02	; 2
    11e2:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LEDOverride>
    11e6:	08 95       	ret
	} else if ((val <= 76) && (val > 58)) {
    11e8:	9c 01       	movw	r18, r24
    11ea:	2b 53       	subi	r18, 0x3B	; 59
    11ec:	31 09       	sbc	r19, r1
    11ee:	22 31       	cpi	r18, 0x12	; 18
    11f0:	31 05       	cpc	r19, r1
    11f2:	28 f4       	brcc	.+10     	; 0x11fe <LEDShowPercentage+0x3c>
		LEDOverride(LedLevel67);	// 2/3
    11f4:	8e ea       	ldi	r24, 0xAE	; 174
    11f6:	93 e0       	ldi	r25, 0x03	; 3
    11f8:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LEDOverride>
    11fc:	08 95       	ret
	} else if ((val <= 58) && (val > 42)) {
    11fe:	9c 01       	movw	r18, r24
    1200:	2b 52       	subi	r18, 0x2B	; 43
    1202:	31 09       	sbc	r19, r1
    1204:	20 31       	cpi	r18, 0x10	; 16
    1206:	31 05       	cpc	r19, r1
    1208:	28 f4       	brcc	.+10     	; 0x1214 <LEDShowPercentage+0x52>
		LEDOverride(LedLevel50);	// 1/2
    120a:	8c e6       	ldi	r24, 0x6C	; 108
    120c:	94 e0       	ldi	r25, 0x04	; 4
    120e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LEDOverride>
    1212:	08 95       	ret
	} else if ((val <= 42) && (val > 25)) {
    1214:	9c 01       	movw	r18, r24
    1216:	2a 51       	subi	r18, 0x1A	; 26
    1218:	31 09       	sbc	r19, r1
    121a:	21 31       	cpi	r18, 0x11	; 17
    121c:	31 05       	cpc	r19, r1
    121e:	28 f4       	brcc	.+10     	; 0x122a <LEDShowPercentage+0x68>
		LEDOverride(LedLevel33);	// 1/3
    1220:	80 e2       	ldi	r24, 0x20	; 32
    1222:	95 e0       	ldi	r25, 0x05	; 5
    1224:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LEDOverride>
    1228:	08 95       	ret
	} else if ((val <= 25) && (val > 8)) {
    122a:	09 97       	sbiw	r24, 0x09	; 9
    122c:	41 97       	sbiw	r24, 0x11	; 17
    122e:	28 f4       	brcc	.+10     	; 0x123a <LEDShowPercentage+0x78>
		LEDOverride(LedLevel17);	// 1/6
    1230:	8a ec       	ldi	r24, 0xCA	; 202
    1232:	95 e0       	ldi	r25, 0x05	; 5
    1234:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LEDOverride>
    1238:	08 95       	ret
	} else {	// Less than or equal to 8
		LEDOverride(LedLevel0);
    123a:	8a e6       	ldi	r24, 0x6A	; 106
    123c:	96 e0       	ldi	r25, 0x06	; 6
    123e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LEDOverride>
    1242:	08 95       	ret

00001244 <LEDDisable>:
	ledState = LEDSTATE_PREPAREROW;
}

void LEDDisable(void)
{
	TURNOFF_LED(0);	// Disable all LEDs while measuring battery voltage or ambient light, or before deep sleep
    1244:	25 98       	cbi	0x04, 5	; 4
	TURNOFF_LED(1);
    1246:	26 98       	cbi	0x04, 6	; 4
	TURNOFF_LED(2);
    1248:	27 98       	cbi	0x04, 7	; 4
    124a:	08 95       	ret

0000124c <LEDpwm>:
}

void LEDpwm(U16* ledLevels)
{
    124c:	fc 01       	movw	r30, r24
	if (ledLevels[0]) {
    124e:	80 81       	ld	r24, Z
    1250:	91 81       	ldd	r25, Z+1	; 0x01
    1252:	89 2b       	or	r24, r25
    1254:	29 f0       	breq	.+10     	; 0x1260 <LEDpwm+0x14>
		TURNON_LED(0);	// Enable LED if non-zero light level
    1256:	25 9a       	sbi	0x04, 5	; 4
		OCR1AL = ledLevels[0] >> 8;	// Put top 8 bits of each LED level into PWM hardware
    1258:	81 81       	ldd	r24, Z+1	; 0x01
    125a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    125e:	01 c0       	rjmp	.+2      	; 0x1262 <LEDpwm+0x16>
	} else {
		TURNOFF_LED(0);	// Must turn off LED when zero, since PWM=0 is still a glimmer
    1260:	25 98       	cbi	0x04, 5	; 4
	}
	if (ledLevels[1]) {
    1262:	82 81       	ldd	r24, Z+2	; 0x02
    1264:	93 81       	ldd	r25, Z+3	; 0x03
    1266:	89 2b       	or	r24, r25
    1268:	29 f0       	breq	.+10     	; 0x1274 <LEDpwm+0x28>
		TURNON_LED(1);	// Enable LED if non-zero light level
    126a:	26 9a       	sbi	0x04, 6	; 4
		OCR1BL = ledLevels[1] >> 8;	// Put top 8 bits of each LED level into PWM hardware
    126c:	83 81       	ldd	r24, Z+3	; 0x03
    126e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1272:	01 c0       	rjmp	.+2      	; 0x1276 <LEDpwm+0x2a>
	} else {
		TURNOFF_LED(1);	// Must turn off LED when zero, since PWM=0 is still a glimmer
    1274:	26 98       	cbi	0x04, 6	; 4
	}
	if (ledLevels[2]) {
    1276:	84 81       	ldd	r24, Z+4	; 0x04
    1278:	95 81       	ldd	r25, Z+5	; 0x05
    127a:	89 2b       	or	r24, r25
    127c:	29 f0       	breq	.+10     	; 0x1288 <LEDpwm+0x3c>
		TURNON_LED(2);	// Enable LED if non-zero light level
    127e:	27 9a       	sbi	0x04, 7	; 4
		OCR1CL = ledLevels[2] >> 8;	// Put top 8 bits of each LED level into PWM hardware
    1280:	85 81       	ldd	r24, Z+5	; 0x05
    1282:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
    1286:	08 95       	ret
	} else {
		TURNOFF_LED(2);	// Must turn off LED when zero, since PWM=0 is still a glimmer
    1288:	27 98       	cbi	0x04, 7	; 4
    128a:	08 95       	ret

0000128c <LEDEventHandler>:

// Private function prototypes
void LEDpwm(U16* ledLevels);

void LEDEventHandler(U8 eventId, U16 eventArg)
{
    128c:	ef 92       	push	r14
    128e:	ff 92       	push	r15
    1290:	0f 93       	push	r16
    1292:	1f 93       	push	r17
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
	U8 ledIndex;
	switch (eventId) {
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	83 31       	cpi	r24, 0x13	; 19
    129c:	91 05       	cpc	r25, r1
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <LEDEventHandler+0x16>
    12a0:	5e c1       	rjmp	.+700    	; 0x155e <LEDEventHandler+0x2d2>
    12a2:	eb 01       	movw	r28, r22
    12a4:	fc 01       	movw	r30, r24
    12a6:	ef 57       	subi	r30, 0x7F	; 127
    12a8:	ff 4f       	sbci	r31, 0xFF	; 255
    12aa:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__tablejump2__>
	case EVENT_PREINIT:
		TCCR1A = 0xA9;	// Bits 2-3,4-5 & 6-7 are PWM compare for each main LED, 10=Mark then space, bits 0-1 are WGM0,1
    12ae:	89 ea       	ldi	r24, 0xA9	; 169
    12b0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		TCCR1B = 0x09;	// Bits 0-2 select clock (001==No prescaler), bits 3-4 are WGM2,3 (0101 for WGM=Fast PWM, 8 bit)
    12b4:	89 e0       	ldi	r24, 0x09	; 9
    12b6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		break;
    12ba:	51 c1       	rjmp	.+674    	; 0x155e <LEDEventHandler+0x2d2>
	case EVENT_INIT:
		TURNOFF_LED(0);
    12bc:	25 98       	cbi	0x04, 5	; 4
		TURNOFF_LED(1);
    12be:	26 98       	cbi	0x04, 6	; 4
		TURNOFF_LED(2);
    12c0:	27 98       	cbi	0x04, 7	; 4
		nightSeriesIndex = LEDSERIES_ON;	// Steady On
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <nightSeriesIndex>
		duskSeriesIndex = LEDSERIES_CIRCLE;	// For single flash
    12c8:	82 e0       	ldi	r24, 0x02	; 2
    12ca:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <duskSeriesIndex>
		daySeriesIndex = LEDSERIES_OFF;	// For LEDS off.  Should recover these values from EEPROM to cope with power outages
    12ce:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <daySeriesIndex>
		daylight = DAYTIME_UNKNOWN;	// Wait for first LDR reading to set this properly
    12d2:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <daylight>
		ledRow = 0;	// No animation until we know the light level
    12d6:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <ledRow+0x1>
    12da:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <ledRow>
		break;
    12de:	3f c1       	rjmp	.+638    	; 0x155e <LEDEventHandler+0x2d2>
	case EVENT_TICK:
		if (ledRow) {
    12e0:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <ledRow>
    12e4:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <ledRow+0x1>
    12e8:	00 97       	sbiw	r24, 0x00	; 0
    12ea:	09 f4       	brne	.+2      	; 0x12ee <LEDEventHandler+0x62>
    12ec:	38 c1       	rjmp	.+624    	; 0x155e <LEDEventHandler+0x2d2>
			switch (ledState) {
    12ee:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <ledState>
    12f2:	22 30       	cpi	r18, 0x02	; 2
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <LEDEventHandler+0x6c>
    12f6:	3f c0       	rjmp	.+126    	; 0x1376 <LEDEventHandler+0xea>
    12f8:	23 30       	cpi	r18, 0x03	; 3
    12fa:	09 f4       	brne	.+2      	; 0x12fe <LEDEventHandler+0x72>
    12fc:	83 c0       	rjmp	.+262    	; 0x1404 <LEDEventHandler+0x178>
    12fe:	21 30       	cpi	r18, 0x01	; 1
    1300:	09 f0       	breq	.+2      	; 0x1304 <LEDEventHandler+0x78>
    1302:	2d c1       	rjmp	.+602    	; 0x155e <LEDEventHandler+0x2d2>
			case LEDSTATE_PREPAREROW:
				//OSprintf("Start Fading...\r\n");
				ledFadeMs = pgm_read_word(&ledRow->fadeMs);	// Cache flash table entry into RAM (I hate Harvard architecture!)
    1304:	fc 01       	movw	r30, r24
    1306:	36 96       	adiw	r30, 0x06	; 6
    1308:	65 91       	lpm	r22, Z+
    130a:	74 91       	lpm	r23, Z
				ledHoldMs = pgm_read_word(&ledRow->holdMs);
    130c:	fc 01       	movw	r30, r24
    130e:	38 96       	adiw	r30, 0x08	; 8
    1310:	25 91       	lpm	r18, Z+
    1312:	34 91       	lpm	r19, Z
    1314:	30 93 7b 02 	sts	0x027B, r19	; 0x80027b <ledHoldMs+0x1>
    1318:	20 93 7a 02 	sts	0x027A, r18	; 0x80027a <ledHoldMs>
    131c:	cc e7       	ldi	r28, 0x7C	; 124
    131e:	d2 e0       	ldi	r29, 0x02	; 2
    1320:	22 e8       	ldi	r18, 0x82	; 130
    1322:	32 e0       	ldi	r19, 0x02	; 2
    1324:	de 01       	movw	r26, r28
				for (ledIndex = 0; ledIndex < NUMLEDS; ledIndex++) {
					ledTargets[ledIndex] = pgm_read_word(&ledRow->targets[ledIndex]);
    1326:	fc 01       	movw	r30, r24
    1328:	45 91       	lpm	r20, Z+
    132a:	54 91       	lpm	r21, Z
    132c:	4d 93       	st	X+, r20
    132e:	5d 93       	st	X+, r21
    1330:	02 96       	adiw	r24, 0x02	; 2
			switch (ledState) {
			case LEDSTATE_PREPAREROW:
				//OSprintf("Start Fading...\r\n");
				ledFadeMs = pgm_read_word(&ledRow->fadeMs);	// Cache flash table entry into RAM (I hate Harvard architecture!)
				ledHoldMs = pgm_read_word(&ledRow->holdMs);
				for (ledIndex = 0; ledIndex < NUMLEDS; ledIndex++) {
    1332:	a2 17       	cp	r26, r18
    1334:	b3 07       	cpc	r27, r19
    1336:	b9 f7       	brne	.-18     	; 0x1326 <LEDEventHandler+0x9a>
					ledTargets[ledIndex] = pgm_read_word(&ledRow->targets[ledIndex]);
				}
				//OSprintf("Row: %4x %4x %4x, Fade:%d, Hold:%d\r\n", ledTargets[0], ledTargets[1], ledTargets[2], ledFadeMs, ledHoldMs);
				ledState = LEDSTATE_FADING;
    1338:	82 e0       	ldi	r24, 0x02	; 2
    133a:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <ledState>
				// Set up ledSteps for each LED, so we know how much to add for each ms.  Allow for fractional adding
				ledTime = ledFadeMs;
    133e:	e6 2e       	mov	r14, r22
    1340:	f7 2e       	mov	r15, r23
    1342:	70 93 90 02 	sts	0x0290, r23	; 0x800290 <ledTime+0x1>
    1346:	60 93 8f 02 	sts	0x028F, r22	; 0x80028f <ledTime>
    134a:	07 e9       	ldi	r16, 0x97	; 151
    134c:	12 e0       	ldi	r17, 0x02	; 2
    134e:	e1 e9       	ldi	r30, 0x91	; 145
    1350:	f2 e0       	ldi	r31, 0x02	; 2
				for (ledIndex = 0; ledIndex < NUMLEDS; ledIndex++) {
					S16 ledDiff = ledTargets[ledIndex] - ledLvls[ledIndex];
    1352:	89 91       	ld	r24, Y+
    1354:	99 91       	ld	r25, Y+
    1356:	d8 01       	movw	r26, r16
    1358:	4d 91       	ld	r20, X+
    135a:	5d 91       	ld	r21, X+
    135c:	8d 01       	movw	r16, r26
					ledStep[ledIndex] = ledDiff / ledTime;	// Minimum change in PWM brightness is 1 units / 256 ms, or full scale over a minute
    135e:	84 1b       	sub	r24, r20
    1360:	95 0b       	sbc	r25, r21
    1362:	6e 2d       	mov	r22, r14
    1364:	7f 2d       	mov	r23, r15
    1366:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__divmodhi4>
    136a:	61 93       	st	Z+, r22
    136c:	71 93       	st	Z+, r23
				}
				//OSprintf("Row: %4x %4x %4x, Fade:%d, Hold:%d\r\n", ledTargets[0], ledTargets[1], ledTargets[2], ledFadeMs, ledHoldMs);
				ledState = LEDSTATE_FADING;
				// Set up ledSteps for each LED, so we know how much to add for each ms.  Allow for fractional adding
				ledTime = ledFadeMs;
				for (ledIndex = 0; ledIndex < NUMLEDS; ledIndex++) {
    136e:	c2 17       	cp	r28, r18
    1370:	d3 07       	cpc	r29, r19
    1372:	79 f7       	brne	.-34     	; 0x1352 <LEDEventHandler+0xc6>
    1374:	f4 c0       	rjmp	.+488    	; 0x155e <LEDEventHandler+0x2d2>
					ledStep[ledIndex] = ledDiff / ledTime;	// Minimum change in PWM brightness is 1 units / 256 ms, or full scale over a minute
					//if (0 == ledIndex) OSprintf("Curr: %4x, Trgt: %4x, Diff: %4x, Step: %d\r\n", ledLvls[0], ledTargets[0], ledDiff, ledStep[0]);
				}
				break;
			case LEDSTATE_FADING:
				if (ledTime > eventArg) {
    1376:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <ledTime>
    137a:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <ledTime+0x1>
    137e:	68 17       	cp	r22, r24
    1380:	79 07       	cpc	r23, r25
    1382:	e0 f4       	brcc	.+56     	; 0x13bc <LEDEventHandler+0x130>
					ledTime -= eventArg;
    1384:	86 1b       	sub	r24, r22
    1386:	97 0b       	sbc	r25, r23
    1388:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <ledTime+0x1>
    138c:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <ledTime>
    1390:	a1 e9       	ldi	r26, 0x91	; 145
    1392:	b2 e0       	ldi	r27, 0x02	; 2
    1394:	e7 e9       	ldi	r30, 0x97	; 151
    1396:	f2 e0       	ldi	r31, 0x02	; 2
    1398:	4d e9       	ldi	r20, 0x9D	; 157
    139a:	52 e0       	ldi	r21, 0x02	; 2
					for (ledIndex = 0; ledIndex < NUMLEDS; ledIndex++) {
						ledLvls[ledIndex] += ledStep[ledIndex];
    139c:	8d 91       	ld	r24, X+
    139e:	9d 91       	ld	r25, X+
    13a0:	20 81       	ld	r18, Z
    13a2:	31 81       	ldd	r19, Z+1	; 0x01
    13a4:	82 0f       	add	r24, r18
    13a6:	93 1f       	adc	r25, r19
    13a8:	81 93       	st	Z+, r24
    13aa:	91 93       	st	Z+, r25
				}
				break;
			case LEDSTATE_FADING:
				if (ledTime > eventArg) {
					ledTime -= eventArg;
					for (ledIndex = 0; ledIndex < NUMLEDS; ledIndex++) {
    13ac:	e4 17       	cp	r30, r20
    13ae:	f5 07       	cpc	r31, r21
    13b0:	a9 f7       	brne	.-22     	; 0x139c <LEDEventHandler+0x110>
						ledLvls[ledIndex] += ledStep[ledIndex];
					}
					LEDpwm(ledLvls);
    13b2:	87 e9       	ldi	r24, 0x97	; 151
    13b4:	92 e0       	ldi	r25, 0x02	; 2
    13b6:	0e 94 26 09 	call	0x124c	; 0x124c <LEDpwm>
    13ba:	d1 c0       	rjmp	.+418    	; 0x155e <LEDEventHandler+0x2d2>
				} else {
					// Force LEDs to target values directly, to cope with accumulating errors
					for (ledIndex = 0; ledIndex < NUMLEDS; ledIndex++) {
						ledLvls[ledIndex] = ledTargets[ledIndex];
    13bc:	e7 e9       	ldi	r30, 0x97	; 151
    13be:	f2 e0       	ldi	r31, 0x02	; 2
    13c0:	ac e7       	ldi	r26, 0x7C	; 124
    13c2:	b2 e0       	ldi	r27, 0x02	; 2
    13c4:	8d 91       	ld	r24, X+
    13c6:	9c 91       	ld	r25, X
    13c8:	11 97       	sbiw	r26, 0x01	; 1
    13ca:	91 83       	std	Z+1, r25	; 0x01
    13cc:	80 83       	st	Z, r24
    13ce:	12 96       	adiw	r26, 0x02	; 2
    13d0:	8d 91       	ld	r24, X+
    13d2:	9c 91       	ld	r25, X
    13d4:	13 97       	sbiw	r26, 0x03	; 3
    13d6:	93 83       	std	Z+3, r25	; 0x03
    13d8:	82 83       	std	Z+2, r24	; 0x02
    13da:	14 96       	adiw	r26, 0x04	; 4
    13dc:	8d 91       	ld	r24, X+
    13de:	9c 91       	ld	r25, X
    13e0:	15 97       	sbiw	r26, 0x05	; 5
    13e2:	95 83       	std	Z+5, r25	; 0x05
    13e4:	84 83       	std	Z+4, r24	; 0x04
					}
					LEDpwm(ledLvls);
    13e6:	cf 01       	movw	r24, r30
    13e8:	0e 94 26 09 	call	0x124c	; 0x124c <LEDpwm>
					ledTime = ledHoldMs;
    13ec:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <ledHoldMs>
    13f0:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <ledHoldMs+0x1>
    13f4:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <ledTime+0x1>
    13f8:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <ledTime>
					//OSprintf("Start Holding...\r\n");
					ledState = LEDSTATE_HOLDING;
    13fc:	83 e0       	ldi	r24, 0x03	; 3
    13fe:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <ledState>
    1402:	ad c0       	rjmp	.+346    	; 0x155e <LEDEventHandler+0x2d2>
				}
				break;
			case LEDSTATE_HOLDING:
				if (ledTime > eventArg) {
    1404:	20 91 8f 02 	lds	r18, 0x028F	; 0x80028f <ledTime>
    1408:	30 91 90 02 	lds	r19, 0x0290	; 0x800290 <ledTime+0x1>
    140c:	62 17       	cp	r22, r18
    140e:	73 07       	cpc	r23, r19
    1410:	38 f4       	brcc	.+14     	; 0x1420 <LEDEventHandler+0x194>
					ledTime -= eventArg;
    1412:	26 1b       	sub	r18, r22
    1414:	37 0b       	sbc	r19, r23
    1416:	30 93 90 02 	sts	0x0290, r19	; 0x800290 <ledTime+0x1>
    141a:	20 93 8f 02 	sts	0x028F, r18	; 0x80028f <ledTime>
    141e:	9f c0       	rjmp	.+318    	; 0x155e <LEDEventHandler+0x2d2>
				} else {
					ledRow++;	// Get next row
    1420:	9c 01       	movw	r18, r24
    1422:	26 5f       	subi	r18, 0xF6	; 246
    1424:	3f 4f       	sbci	r19, 0xFF	; 255
    1426:	30 93 83 02 	sts	0x0283, r19	; 0x800283 <ledRow+0x1>
    142a:	20 93 82 02 	sts	0x0282, r18	; 0x800282 <ledRow>
					if (TABLE_END == pgm_read_word(&ledRow->fadeMs)) {	// Check for end of table in flash
    142e:	fc 01       	movw	r30, r24
    1430:	70 96       	adiw	r30, 0x10	; 16
    1432:	85 91       	lpm	r24, Z+
    1434:	94 91       	lpm	r25, Z
    1436:	8f 3f       	cpi	r24, 0xFF	; 255
    1438:	9f 47       	sbci	r25, 0x7F	; 127
    143a:	49 f5       	brne	.+82     	; 0x148e <LEDEventHandler+0x202>
						if (0 == ledPatternCycles) {
    143c:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <ledPatternCycles>
    1440:	81 11       	cpse	r24, r1
    1442:	0b c0       	rjmp	.+22     	; 0x145a <LEDEventHandler+0x1ce>
							ledState = LEDSTATE_IDLE;	// Assume all LEDs are now off, because LED_BRAKE also fades down to off before resuming
    1444:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <ledState>
							OSprintf("LEDs idle\r\n");
    1448:	88 e6       	ldi	r24, 0x68	; 104
    144a:	91 e0       	ldi	r25, 0x01	; 1
    144c:	9f 93       	push	r25
    144e:	8f 93       	push	r24
    1450:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <OSprintf>
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	0d c0       	rjmp	.+26     	; 0x1474 <LEDEventHandler+0x1e8>
						} else if (0 == --ledPatternCycles) {
    145a:	81 50       	subi	r24, 0x01	; 1
    145c:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <ledPatternCycles>
    1460:	81 11       	cpse	r24, r1
    1462:	08 c0       	rjmp	.+16     	; 0x1474 <LEDEventHandler+0x1e8>
							ledPatternIndex = LEDStartPattern(ledPatternIndex+1);
    1464:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <ledPatternIndex>
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	01 96       	adiw	r24, 0x01	; 1
    146c:	0e 94 88 08 	call	0x1110	; 0x1110 <LEDStartPattern>
    1470:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <ledPatternIndex>
						}
						ledRow = ledBackgroundTop;	// Go to top of current background table (maybe NULL)
    1474:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <ledBackgroundTop>
    1478:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <ledBackgroundTop+0x1>
    147c:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <ledRow+0x1>
    1480:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <ledRow>
					}
					if (LEDSTATE_IDLE != ledState) {
    1484:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <ledState>
    1488:	88 23       	and	r24, r24
    148a:	09 f4       	brne	.+2      	; 0x148e <LEDEventHandler+0x202>
    148c:	68 c0       	rjmp	.+208    	; 0x155e <LEDEventHandler+0x2d2>
						//OSprintf("Prepare next LED row...\r\n");
						ledState = LEDSTATE_PREPAREROW;
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <ledState>
    1494:	64 c0       	rjmp	.+200    	; 0x155e <LEDEventHandler+0x2d2>
				break;
			}
		}
		break;
	case EVENT_BRAKE:
		LEDOverride(LedBrake);
    1496:	86 e5       	ldi	r24, 0x56	; 86
    1498:	91 e0       	ldi	r25, 0x01	; 1
    149a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LEDOverride>
		break;
    149e:	5f c0       	rjmp	.+190    	; 0x155e <LEDEventHandler+0x2d2>
	case EVENT_SINGLE_CLICK:
		OSIssueEvent(EVENT_NEXTLED, 0);	// Select next light pattern based on button press
    14a0:	60 e0       	ldi	r22, 0x00	; 0
    14a2:	70 e0       	ldi	r23, 0x00	; 0
    14a4:	8f e0       	ldi	r24, 0x0F	; 15
    14a6:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
		break;
    14aa:	59 c0       	rjmp	.+178    	; 0x155e <LEDEventHandler+0x2d2>
	case EVENT_REQSLEEP:
		if ((LEDSTATE_IDLE != ledState) || (ledPlayingSeries != LEDSERIES_OFF)) *(bool*)eventArg = false;	// Disallow sleep unless we're idle
    14ac:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <ledState>
    14b0:	81 11       	cpse	r24, r1
    14b2:	05 c0       	rjmp	.+10     	; 0x14be <LEDEventHandler+0x232>
    14b4:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <ledPlayingSeries>
    14b8:	88 23       	and	r24, r24
    14ba:	09 f4       	brne	.+2      	; 0x14be <LEDEventHandler+0x232>
    14bc:	50 c0       	rjmp	.+160    	; 0x155e <LEDEventHandler+0x2d2>
    14be:	18 82       	st	Y, r1
    14c0:	4e c0       	rjmp	.+156    	; 0x155e <LEDEventHandler+0x2d2>
		break;
	case EVENT_SLEEP:
		LEDDisable();
    14c2:	0e 94 22 09 	call	0x1244	; 0x1244 <LEDDisable>
		break;
    14c6:	4b c0       	rjmp	.+150    	; 0x155e <LEDEventHandler+0x2d2>
	case EVENT_DAYLIGHT:
		daylight = eventArg;
    14c8:	60 93 a6 02 	sts	0x02A6, r22	; 0x8002a6 <daylight>
		OSprintf("New daylight=%d\r\n", daylight);
    14cc:	77 27       	eor	r23, r23
    14ce:	7f 93       	push	r23
    14d0:	6f 93       	push	r22
    14d2:	84 e7       	ldi	r24, 0x74	; 116
    14d4:	91 e0       	ldi	r25, 0x01	; 1
    14d6:	9f 93       	push	r25
    14d8:	8f 93       	push	r24
    14da:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <OSprintf>
		switch (daylight) {
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <daylight>
    14ea:	82 30       	cpi	r24, 0x02	; 2
    14ec:	51 f0       	breq	.+20     	; 0x1502 <LEDEventHandler+0x276>
    14ee:	83 30       	cpi	r24, 0x03	; 3
    14f0:	71 f0       	breq	.+28     	; 0x150e <LEDEventHandler+0x282>
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	a1 f5       	brne	.+104    	; 0x155e <LEDEventHandler+0x2d2>
		case DAYTIME_NIGHT:
			LEDStartSeries(nightSeriesIndex);	// Nighttime, so turn on back light
    14f6:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <nightSeriesIndex>
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	0e 94 b4 08 	call	0x1168	; 0x1168 <LEDStartSeries>
			break;
    1500:	2e c0       	rjmp	.+92     	; 0x155e <LEDEventHandler+0x2d2>
		case DAYTIME_DUSK:
			LEDStartSeries(duskSeriesIndex);	// Dusk, so start flashing
    1502:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <duskSeriesIndex>
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	0e 94 b4 08 	call	0x1168	; 0x1168 <LEDStartSeries>
			break;
    150c:	28 c0       	rjmp	.+80     	; 0x155e <LEDEventHandler+0x2d2>
		case DAYTIME_DAY:
			LEDStartSeries(daySeriesIndex);	// Daylight, so turn LEDs off in normal use
    150e:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <daySeriesIndex>
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	0e 94 b4 08 	call	0x1168	; 0x1168 <LEDStartSeries>
			break;
    1518:	22 c0       	rjmp	.+68     	; 0x155e <LEDEventHandler+0x2d2>
		}
		break;
	case EVENT_NEXTLED:	// Select next LED series of patterns
		switch (daylight) {
    151a:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <daylight>
    151e:	82 30       	cpi	r24, 0x02	; 2
    1520:	69 f0       	breq	.+26     	; 0x153c <LEDEventHandler+0x2b0>
    1522:	83 30       	cpi	r24, 0x03	; 3
    1524:	a1 f0       	breq	.+40     	; 0x154e <LEDEventHandler+0x2c2>
    1526:	81 30       	cpi	r24, 0x01	; 1
    1528:	d1 f4       	brne	.+52     	; 0x155e <LEDEventHandler+0x2d2>
		case DAYTIME_NIGHT:
			nightSeriesIndex = LEDStartSeries(nightSeriesIndex+1);	// Select next night series
    152a:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <nightSeriesIndex>
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	01 96       	adiw	r24, 0x01	; 1
    1532:	0e 94 b4 08 	call	0x1168	; 0x1168 <LEDStartSeries>
    1536:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <nightSeriesIndex>
			break;
    153a:	11 c0       	rjmp	.+34     	; 0x155e <LEDEventHandler+0x2d2>
		case DAYTIME_DUSK:
			duskSeriesIndex = LEDStartSeries(duskSeriesIndex+1);	// Select next dusk series
    153c:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <duskSeriesIndex>
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	01 96       	adiw	r24, 0x01	; 1
    1544:	0e 94 b4 08 	call	0x1168	; 0x1168 <LEDStartSeries>
    1548:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <duskSeriesIndex>
			break;
    154c:	08 c0       	rjmp	.+16     	; 0x155e <LEDEventHandler+0x2d2>
		case DAYTIME_DAY:
			daySeriesIndex = LEDStartSeries(daySeriesIndex+1);	// Select next day series
    154e:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <daySeriesIndex>
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	01 96       	adiw	r24, 0x01	; 1
    1556:	0e 94 b4 08 	call	0x1168	; 0x1168 <LEDStartSeries>
    155a:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <daySeriesIndex>
		}
		break;
	default:
		break;	// Does nothing, but stops useless warnings from the compiler
	}
}
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	1f 91       	pop	r17
    1564:	0f 91       	pop	r16
    1566:	ff 90       	pop	r15
    1568:	ef 90       	pop	r14
    156a:	08 95       	ret

0000156c <EEPROMwrite>:
	EEPROMwrite(logIndex++, (U8)item);
}

void EEPROMwrite(U16 addr, U8 data)
{
	wdt_reset();
    156c:	a8 95       	wdr
	while(EECR & (1<<EEPE)) ;	/* Wait for completion of previous write */
    156e:	f9 99       	sbic	0x1f, 1	; 31
    1570:	fe cf       	rjmp	.-4      	; 0x156e <EEPROMwrite+0x2>
	EEAR = addr;	/* Set up address and Data Registers */
    1572:	92 bd       	out	0x22, r25	; 34
    1574:	81 bd       	out	0x21, r24	; 33
	if (0xFF == data) {	// Erase only
    1576:	6f 3f       	cpi	r22, 0xFF	; 255
    1578:	19 f4       	brne	.+6      	; 0x1580 <EEPROMwrite+0x14>
		EECR = (1<<EEMPE) | (1<<EEPM0);	// Write logical one to EEMPE as well as 0 to EEPE and 01 to EEPM0 & 1
    157a:	84 e1       	ldi	r24, 0x14	; 20
    157c:	8f bb       	out	0x1f, r24	; 31
    157e:	03 c0       	rjmp	.+6      	; 0x1586 <EEPROMwrite+0x1a>
	} else { // Erase and program
		EEDR = data;
    1580:	60 bd       	out	0x20, r22	; 32
		EECR = (1<<EEMPE);	// Write logical one to EEMPE as well as 0 to EEPE and 00 to EEPM0 & 1
    1582:	84 e0       	ldi	r24, 0x04	; 4
    1584:	8f bb       	out	0x1f, r24	; 31
	}
	EECR |= (1<<EEPE);	// Start eeprom write by setting EEPE (Will auto-clear)
    1586:	f9 9a       	sbi	0x1f, 1	; 31
    1588:	08 95       	ret

0000158a <LOGEventHandler>:
// Local prototypes
void EEPROMwrite(U16 addr, U8 data);

void LOGEventHandler(Event event, U16 eventArg)
{
	switch (event) {
    158a:	81 30       	cpi	r24, 0x01	; 1
    158c:	49 f4       	brne	.+18     	; 0x15a0 <LOGEventHandler+0x16>
	case EVENT_INIT:
		EEPROMwrite(0, 0xFF);	// Clear the old log, by writing EndOfLog byte (0xFF) to first byte 
    158e:	6f ef       	ldi	r22, 0xFF	; 255
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	0e 94 b6 0a 	call	0x156c	; 0x156c <EEPROMwrite>
		logIndex = 0;	// Ready to start logging from start
    1598:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <logIndex+0x1>
    159c:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <logIndex>
    15a0:	08 95       	ret

000015a2 <OSSleep>:
		break;	// Does nothing, but stops useless warnings from the compiler
	}
}

void OSSleep(int sleepType)
{
    15a2:	1f 93       	push	r17
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	ec 01       	movw	r28, r24
	if (SLEEPTYPE_DEEP == sleepType) {	// So only allow button to wake us up
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	71 f4       	brne	.+28     	; 0x15ca <OSSleep+0x28>
		OSprintf("DeepSleep\r\n");
    15ae:	81 ea       	ldi	r24, 0xA1	; 161
    15b0:	91 e0       	ldi	r25, 0x01	; 1
    15b2:	9f 93       	push	r25
    15b4:	8f 93       	push	r24
    15b6:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <OSprintf>
		EICRA = 0x03;	// Wake on down edge from button (INT0), as long as EIMSK says so...
    15ba:	83 e0       	ldi	r24, 0x03	; 3
    15bc:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
		EIMSK = 0x01;	// Enable interrupts from button (INT0)
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	8d bb       	out	0x1d, r24	; 29
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	0d c0       	rjmp	.+26     	; 0x15e4 <OSSleep+0x42>
	} else {	// Assume SLEEPTYPE_LIGHT, so allow button and accelerometer to wake us up
		OSprintf("LightSleep\r\n");
    15ca:	8d ea       	ldi	r24, 0xAD	; 173
    15cc:	91 e0       	ldi	r25, 0x01	; 1
    15ce:	9f 93       	push	r25
    15d0:	8f 93       	push	r24
    15d2:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <OSprintf>
		EICRA = 0x13;	// Wake on down edge from button (INT0) and either edge from accelerometer (INT2), as long as EIMSK says so...
    15d6:	83 e1       	ldi	r24, 0x13	; 19
    15d8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
		EIMSK = 0x05;	// Enable interrupts from button (INT0) and accelerometer (INT2)
    15dc:	85 e0       	ldi	r24, 0x05	; 5
    15de:	8d bb       	out	0x1d, r24	; 29
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
	}
	OSIssueEvent(EVENT_SLEEP, sleepType);	// Tell system we're going to sleep
    15e4:	be 01       	movw	r22, r28
    15e6:	87 e0       	ldi	r24, 0x07	; 7
    15e8:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
    SMCR = 0x5;	// Power Down (----010x) and Sleep Enable bit (----xxx1) and only wake on external interrupt (button, accelerometer or USB power)
    15ec:	15 e0       	ldi	r17, 0x05	; 5
    15ee:	13 bf       	out	0x33, r17	; 51
    sleep_cpu();    // Cause AVR to enter sleep mode
    15f0:	88 95       	sleep
    SMCR = 0x0;	// Clear Sleep Enable bit (----xxx0)
    15f2:	13 be       	out	0x33, r1	; 51
	OSIssueEvent(EVENT_WAKE, sleepType);	// Tell system we've woken from sleep
    15f4:	be 01       	movw	r22, r28
    15f6:	88 e0       	ldi	r24, 0x08	; 8
    15f8:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
	EICRA = 0x11;	// Wake on either edge from button (INT0) and accelerometer (INT2), as long as EIMSK says so...
    15fc:	81 e1       	ldi	r24, 0x11	; 17
    15fe:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 0x05;	// Enable interrupts from button (INT0) and accelerometer (INT2)
    1602:	1d bb       	out	0x1d, r17	; 29
	//OSprintf("Wake!\r\n");	// No earlier than this - UART won't be operating until WAKE has finished
}
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	1f 91       	pop	r17
    160a:	08 95       	ret

0000160c <OSEventHandler>:
	BTNEventHandler(eventId, eventArg);
	// Other event handlers here...
}

void OSEventHandler(Event event, U16 eventArg)
{
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	1f 92       	push	r1
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
	bool sleepReq;

	switch (event) {
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	87 31       	cpi	r24, 0x17	; 23
    161a:	91 05       	cpc	r25, r1
    161c:	08 f0       	brcs	.+2      	; 0x1620 <OSEventHandler+0x14>
    161e:	25 c1       	rjmp	.+586    	; 0x186a <OSEventHandler+0x25e>
    1620:	fc 01       	movw	r30, r24
    1622:	ec 56       	subi	r30, 0x6C	; 108
    1624:	ff 4f       	sbci	r31, 0xFF	; 255
    1626:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__tablejump2__>
	case EVENT_PREINIT:
		oldMCUSR = MCUSR;
    162a:	84 b7       	in	r24, 0x34	; 52
    162c:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <oldMCUSR>
		MCUSR = 0;	// Ready for next time
    1630:	14 be       	out	0x34, r1	; 52
		PORTB = 0x10;	// Pull up PB5 (unused input).  Was 0x1E to pull up MOSI, MISO and SLCK when they're not used for SPI, but then SPI stopped working...
    1632:	80 e1       	ldi	r24, 0x10	; 16
    1634:	85 b9       	out	0x05, r24	; 5
		DDRB = 0xE7;	// PB0-3 SPI (MOSI, SCLK and SS as outputs,  MISO as inputs to allow SPI to be activated), PB5-7 main LEDs
    1636:	87 ee       	ldi	r24, 0xE7	; 231
    1638:	84 b9       	out	0x04, r24	; 4
		PORTC = 0xC0;	// Pull up PC6,7 (unused inputs)
    163a:	80 ec       	ldi	r24, 0xC0	; 192
    163c:	88 b9       	out	0x08, r24	; 8
		DDRC = 0x00;	// Unused, only PC6,7 available
    163e:	17 b8       	out	0x07, r1	; 7
		PORTD = 0xF2;	// Pull up PD1,4,5,6,7 (unused inputs)
    1640:	82 ef       	ldi	r24, 0xF2	; 242
    1642:	8b b9       	out	0x0b, r24	; 11
		DDRD = 0x00;	// PD0 btn IRQ, PD2,3 WAKE IRQs from ADXL363 accelerometer
    1644:	1a b8       	out	0x0a, r1	; 10
		PORTE = 0x04;	// PE2 is unused, so pullup to reduce power
    1646:	84 e0       	ldi	r24, 0x04	; 4
    1648:	8e b9       	out	0x0e, r24	; 14
		DDRE = 0x00;	// PE6 STAT from battery charger
    164a:	1d b8       	out	0x0d, r1	; 13
		PORTF = 0x82;	// Pull up PF1,7 as they're unused
    164c:	82 e8       	ldi	r24, 0x82	; 130
    164e:	81 bb       	out	0x11, r24	; 17
		DDRF = 0x21;	// PF0 Indicator LED, PF4 Light lvl, PF5 Light Enable, PF6 Battery Voltage
    1650:	81 e2       	ldi	r24, 0x21	; 33
    1652:	80 bb       	out	0x10, r24	; 16
		PORTB = 0x00;	// Turn off all main LEDs
    1654:	15 b8       	out	0x05, r1	; 5
		PORTF = 0x50;	// Indicator LED off and LDR disable, but pull LDR_VAL and BATT_VAL up when not in use as ADC
    1656:	80 e5       	ldi	r24, 0x50	; 80
    1658:	81 bb       	out	0x11, r24	; 17
		DIDR0 = 0x50;	// Digital Input Disable Register for ADC from LDR and Batt.  See 7.8.6 and 24.9.5
    165a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
		break;
    165e:	05 c1       	rjmp	.+522    	; 0x186a <OSEventHandler+0x25e>
	case EVENT_INIT:
		EICRA = 0x11;	// Wake on either edge from button (INT0) and accelerometer (INT2), as long as EIMSK says so...
    1660:	81 e1       	ldi	r24, 0x11	; 17
    1662:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
		EIMSK = 0x05;	// Enable interrupts from button (INT0) and accelerometer (INT2)
    1666:	85 e0       	ldi	r24, 0x05	; 5
    1668:	8d bb       	out	0x1d, r24	; 29
		break;
    166a:	ff c0       	rjmp	.+510    	; 0x186a <OSEventHandler+0x25e>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    166c:	9d e0       	ldi	r25, 0x0D	; 13
    166e:	88 e1       	ldi	r24, 0x18	; 24
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	a8 95       	wdr
    1676:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	case EVENT_POSTINIT:
		wdt_enable(WDTO_500MS);
		if (oldMCUSR & (1<<BORF)) {	// Brown Out
    1680:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <oldMCUSR>
    1684:	82 ff       	sbrs	r24, 2
    1686:	07 c0       	rjmp	.+14     	; 0x1696 <OSEventHandler+0x8a>
			resetStr = (char*)BrownOut;
    1688:	2d e3       	ldi	r18, 0x3D	; 61
    168a:	32 e0       	ldi	r19, 0x02	; 2
    168c:	30 93 a0 02 	sts	0x02A0, r19	; 0x8002a0 <resetStr+0x1>
    1690:	20 93 9f 02 	sts	0x029F, r18	; 0x80029f <resetStr>
    1694:	21 c0       	rjmp	.+66     	; 0x16d8 <OSEventHandler+0xcc>
		} else if (oldMCUSR & (1<<WDRF)) {
    1696:	83 ff       	sbrs	r24, 3
    1698:	07 c0       	rjmp	.+14     	; 0x16a8 <OSEventHandler+0x9c>
			resetStr = (char*)WatchDog;
    169a:	24 e3       	ldi	r18, 0x34	; 52
    169c:	32 e0       	ldi	r19, 0x02	; 2
    169e:	30 93 a0 02 	sts	0x02A0, r19	; 0x8002a0 <resetStr+0x1>
    16a2:	20 93 9f 02 	sts	0x029F, r18	; 0x80029f <resetStr>
    16a6:	18 c0       	rjmp	.+48     	; 0x16d8 <OSEventHandler+0xcc>
		} else if (oldMCUSR & (1<<EXTRF)) {
    16a8:	81 ff       	sbrs	r24, 1
    16aa:	07 c0       	rjmp	.+14     	; 0x16ba <OSEventHandler+0xae>
			resetStr = (char*)ExtReset;
    16ac:	2b e2       	ldi	r18, 0x2B	; 43
    16ae:	32 e0       	ldi	r19, 0x02	; 2
    16b0:	30 93 a0 02 	sts	0x02A0, r19	; 0x8002a0 <resetStr+0x1>
    16b4:	20 93 9f 02 	sts	0x029F, r18	; 0x80029f <resetStr>
    16b8:	0f c0       	rjmp	.+30     	; 0x16d8 <OSEventHandler+0xcc>
		} else if (oldMCUSR & (1<<PORF)) {
    16ba:	80 ff       	sbrs	r24, 0
    16bc:	07 c0       	rjmp	.+14     	; 0x16cc <OSEventHandler+0xc0>
			resetStr = (char*)PowerOn;
    16be:	23 e2       	ldi	r18, 0x23	; 35
    16c0:	32 e0       	ldi	r19, 0x02	; 2
    16c2:	30 93 a0 02 	sts	0x02A0, r19	; 0x8002a0 <resetStr+0x1>
    16c6:	20 93 9f 02 	sts	0x029F, r18	; 0x80029f <resetStr>
    16ca:	06 c0       	rjmp	.+12     	; 0x16d8 <OSEventHandler+0xcc>
		} else resetStr = (char*)Unknown;
    16cc:	2b e1       	ldi	r18, 0x1B	; 27
    16ce:	32 e0       	ldi	r19, 0x02	; 2
    16d0:	30 93 a0 02 	sts	0x02A0, r19	; 0x8002a0 <resetStr+0x1>
    16d4:	20 93 9f 02 	sts	0x029F, r18	; 0x80029f <resetStr>
		OSprintf("\r\n\nReset:%s (0x%2x)\r\n", resetStr, oldMCUSR);
    16d8:	1f 92       	push	r1
    16da:	8f 93       	push	r24
    16dc:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <resetStr+0x1>
    16e0:	8f 93       	push	r24
    16e2:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <resetStr>
    16e6:	8f 93       	push	r24
    16e8:	8a eb       	ldi	r24, 0xBA	; 186
    16ea:	91 e0       	ldi	r25, 0x01	; 1
    16ec:	9f 93       	push	r25
    16ee:	8f 93       	push	r24
    16f0:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <OSprintf>
		OSprintf("%s%s", OS_BANNER, OS_NEWLINE);
    16f4:	8d ec       	ldi	r24, 0xCD	; 205
    16f6:	91 e0       	ldi	r25, 0x01	; 1
    16f8:	9f 93       	push	r25
    16fa:	8f 93       	push	r24
    16fc:	80 ed       	ldi	r24, 0xD0	; 208
    16fe:	91 e0       	ldi	r25, 0x01	; 1
    1700:	9f 93       	push	r25
    1702:	8f 93       	push	r24
    1704:	8c e5       	ldi	r24, 0x5C	; 92
    1706:	92 e0       	ldi	r25, 0x02	; 2
    1708:	9f 93       	push	r25
    170a:	8f 93       	push	r24
    170c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <OSprintf>
		//sysBits = (DAYTIME_UNKNOWN << SYSBITNUM_DAY) | SYSBIT_STATIONARY | ((usbState & 1) << SYSBITNUM_USB);
		break;
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	a7 c0       	rjmp	.+334    	; 0x186a <OSEventHandler+0x25e>
	case EVENT_TICK:
		wdt_reset();
    171c:	a8 95       	wdr
		// Try to sleep...
		sleepReq = true;	// Assume can sleep, unless any responder sets this to false
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	89 83       	std	Y+1, r24	; 0x01
		OSIssueEvent(EVENT_REQSLEEP, &sleepReq);	// Request that system be allowed to sleep
    1722:	be 01       	movw	r22, r28
    1724:	6f 5f       	subi	r22, 0xFF	; 255
    1726:	7f 4f       	sbci	r23, 0xFF	; 255
    1728:	86 e0       	ldi	r24, 0x06	; 6
    172a:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
		if (sleepReq) OSSleep(SLEEPTYPE_LIGHT);	// Allow either button or accelerometer to wake us from sleep
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	88 23       	and	r24, r24
    1732:	09 f4       	brne	.+2      	; 0x1736 <OSEventHandler+0x12a>
    1734:	9a c0       	rjmp	.+308    	; 0x186a <OSEventHandler+0x25e>
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <OSSleep>
    173e:	95 c0       	rjmp	.+298    	; 0x186a <OSEventHandler+0x25e>
		break;
	case EVENT_DOUBLE_CLICK:
		OSIssueEvent(EVENT_INFO, 0);	// For now, anyway.  Could use some other trigger
    1740:	60 e0       	ldi	r22, 0x00	; 0
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	85 e0       	ldi	r24, 0x05	; 5
    1746:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
		break;
    174a:	8f c0       	rjmp	.+286    	; 0x186a <OSEventHandler+0x25e>
	case EVENT_LONG_CLICK:
		OSSleep(SLEEPTYPE_DEEP);	// Sleep, only looking for button press to wake
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <OSSleep>
		break;
    1754:	8a c0       	rjmp	.+276    	; 0x186a <OSEventHandler+0x25e>
	case EVENT_MOTION:
		sysBits = (sysBits & ~SYSBITMASK_MOT) | ((eventArg & 1) << SYSBITOFF_MOT);
    1756:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <sysBits>
    175a:	8b 7f       	andi	r24, 0xFB	; 251
    175c:	61 70       	andi	r22, 0x01	; 1
    175e:	66 0f       	add	r22, r22
    1760:	66 0f       	add	r22, r22
    1762:	68 2b       	or	r22, r24
    1764:	60 93 a7 02 	sts	0x02A7, r22	; 0x8002a7 <sysBits>
		break;
    1768:	80 c0       	rjmp	.+256    	; 0x186a <OSEventHandler+0x25e>
	case EVENT_USB:
		sysBits = (sysBits & ~SYSBITMASK_USB) | ((eventArg & 1) << SYSBITOFF_USB);
    176a:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <sysBits>
    176e:	87 7f       	andi	r24, 0xF7	; 247
    1770:	61 70       	andi	r22, 0x01	; 1
    1772:	66 0f       	add	r22, r22
    1774:	66 0f       	add	r22, r22
    1776:	66 0f       	add	r22, r22
    1778:	68 2b       	or	r22, r24
    177a:	60 93 a7 02 	sts	0x02A7, r22	; 0x8002a7 <sysBits>
		break;
    177e:	75 c0       	rjmp	.+234    	; 0x186a <OSEventHandler+0x25e>
	case EVENT_BATTGOOD:
		sysBits = (sysBits & ~SYSBITMASK_BAT) | ((eventArg & 1) << SYSBITOFF_BAT);
    1780:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <sysBits>
    1784:	8f 7d       	andi	r24, 0xDF	; 223
    1786:	61 70       	andi	r22, 0x01	; 1
    1788:	62 95       	swap	r22
    178a:	66 0f       	add	r22, r22
    178c:	60 7e       	andi	r22, 0xE0	; 224
    178e:	68 2b       	or	r22, r24
    1790:	60 93 a7 02 	sts	0x02A7, r22	; 0x8002a7 <sysBits>
		break;
    1794:	6a c0       	rjmp	.+212    	; 0x186a <OSEventHandler+0x25e>
	case EVENT_ONBIKE:
		sysBits = (sysBits & ~SYSBITMASK_BIK) | ((eventArg & 1) << SYSBITOFF_BIK);
    1796:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <sysBits>
    179a:	8f 7b       	andi	r24, 0xBF	; 191
    179c:	61 70       	andi	r22, 0x01	; 1
    179e:	62 95       	swap	r22
    17a0:	66 0f       	add	r22, r22
    17a2:	66 0f       	add	r22, r22
    17a4:	60 7c       	andi	r22, 0xC0	; 192
    17a6:	68 2b       	or	r22, r24
    17a8:	60 93 a7 02 	sts	0x02A7, r22	; 0x8002a7 <sysBits>
		break;
    17ac:	5e c0       	rjmp	.+188    	; 0x186a <OSEventHandler+0x25e>
	case EVENT_CHARGING:
		sysBits = (sysBits & ~SYSBITMASK_CHG) | ((eventArg & 1) << SYSBITOFF_CHG);
    17ae:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <sysBits>
    17b2:	98 2f       	mov	r25, r24
    17b4:	9f 7e       	andi	r25, 0xEF	; 239
    17b6:	86 2f       	mov	r24, r22
    17b8:	81 70       	andi	r24, 0x01	; 1
    17ba:	82 95       	swap	r24
    17bc:	80 7f       	andi	r24, 0xF0	; 240
    17be:	89 2b       	or	r24, r25
    17c0:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <sysBits>
		if (eventArg) {
    17c4:	67 2b       	or	r22, r23
    17c6:	49 f0       	breq	.+18     	; 0x17da <OSEventHandler+0x1ce>
			OSprintf("Charging\r\n");
    17c8:	86 ef       	ldi	r24, 0xF6	; 246
    17ca:	91 e0       	ldi	r25, 0x01	; 1
    17cc:	9f 93       	push	r25
    17ce:	8f 93       	push	r24
    17d0:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <OSprintf>
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	48 c0       	rjmp	.+144    	; 0x186a <OSEventHandler+0x25e>
			//LEDStartSeries(LEDSERIES_FLASHTOP); // Show flashing top LED
			// Animate current charged level instead, unless in motion
		} else {
			OSprintf("Charged\r\n");
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	92 e0       	ldi	r25, 0x02	; 2
    17de:	9f 93       	push	r25
    17e0:	8f 93       	push	r24
    17e2:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <OSprintf>
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	3f c0       	rjmp	.+126    	; 0x186a <OSEventHandler+0x25e>
			//LEDStartSeries(LEDSERIES_OFF);	// All off and back to Idle
			// Static display showing 100% charged, unless in motion
		}
		break;
	case EVENT_DAYLIGHT:
		sysBits = (sysBits & ~SYSBITMASK_DAY) | ((eventArg & 3) << SYSBITOFF_DAY);
    17ec:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <sysBits>
    17f0:	8c 7f       	andi	r24, 0xFC	; 252
    17f2:	63 70       	andi	r22, 0x03	; 3
    17f4:	68 2b       	or	r22, r24
    17f6:	60 93 a7 02 	sts	0x02A7, r22	; 0x8002a7 <sysBits>
		break;
    17fa:	37 c0       	rjmp	.+110    	; 0x186a <OSEventHandler+0x25e>
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	a8 95       	wdr
    1802:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1806:	88 61       	ori	r24, 0x18	; 24
    1808:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    180c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1810:	0f be       	out	0x3f, r0	; 63
	case EVENT_SLEEP:
		wdt_disable();	// Don't need a watchdog when we're asleep
		IND_LED_OFF;
    1812:	88 98       	cbi	0x11, 0	; 17
		PRR0 = 0xAD;	// Shut down TWI, Timer0, Timer1, SPI and ADC
    1814:	8d ea       	ldi	r24, 0xAD	; 173
    1816:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		PRR1 = 0x99;	// Shut down USB, Timer3, Timer4 and USART
    181a:	89 e9       	ldi	r24, 0x99	; 153
    181c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
		break;
    1820:	24 c0       	rjmp	.+72     	; 0x186a <OSEventHandler+0x25e>
	case EVENT_WAKE:
		PRR0 = 0xA0;	// Re-enable Timer1, SPI and ADC.  Timer1 used by LEDs for PWM, SPI used by Accelerometer, ADC used by LDR & BattLvl
    1822:	80 ea       	ldi	r24, 0xA0	; 160
    1824:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		PRR1 = 0x00;	// Re-enable USB, Timer3, Timer4 and USART
    1828:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    182c:	9d e0       	ldi	r25, 0x0D	; 13
    182e:	88 e1       	ldi	r24, 0x18	; 24
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	a8 95       	wdr
    1836:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1840:	14 c0       	rjmp	.+40     	; 0x186a <OSEventHandler+0x25e>
		wdt_enable(WDTO_500MS);
		break;
	case EVENT_INFO:
		OSprintf("SysBits 0x%4x%s", sysBits, OS_NEWLINE);
    1842:	8d ec       	ldi	r24, 0xCD	; 205
    1844:	91 e0       	ldi	r25, 0x01	; 1
    1846:	9f 93       	push	r25
    1848:	8f 93       	push	r24
    184a:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <sysBits>
    184e:	1f 92       	push	r1
    1850:	8f 93       	push	r24
    1852:	8b e0       	ldi	r24, 0x0B	; 11
    1854:	92 e0       	ldi	r25, 0x02	; 2
    1856:	9f 93       	push	r25
    1858:	8f 93       	push	r24
    185a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <OSprintf>
		break;
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
	default:
		break;	// Does nothing, but stops useless warnings from the compiler
	}
}
    186a:	0f 90       	pop	r0
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	08 95       	ret

00001872 <_OSIssueEvent>:
		}
	}
}

void _OSIssueEvent(Event eventId, U16 eventArg)
{
    1872:	0f 93       	push	r16
    1874:	1f 93       	push	r17
    1876:	cf 93       	push	r28
    1878:	c8 2f       	mov	r28, r24
    187a:	8b 01       	movw	r16, r22
	OSEventHandler(eventId, eventArg);
    187c:	0e 94 06 0b 	call	0x160c	; 0x160c <OSEventHandler>
#ifdef SWITCH_LOG
	LOGEventHandler(eventId, eventArg);
    1880:	b8 01       	movw	r22, r16
    1882:	8c 2f       	mov	r24, r28
    1884:	0e 94 c5 0a 	call	0x158a	; 0x158a <LOGEventHandler>
#endif //def SWITCH_LOG
#ifdef SWITCH_UART
	UARTEventHandler(eventId, eventArg);
    1888:	b8 01       	movw	r22, r16
    188a:	8c 2f       	mov	r24, r28
    188c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <UARTEventHandler>
#endif //def SWITCH_UART
	ACCELEventHandler(eventId, eventArg);
    1890:	b8 01       	movw	r22, r16
    1892:	8c 2f       	mov	r24, r28
    1894:	0e 94 1e 04 	call	0x83c	; 0x83c <ACCELEventHandler>
	LEDEventHandler(eventId, eventArg);
    1898:	b8 01       	movw	r22, r16
    189a:	8c 2f       	mov	r24, r28
    189c:	0e 94 46 09 	call	0x128c	; 0x128c <LEDEventHandler>
	ADCEventHandler(eventId, eventArg);
    18a0:	b8 01       	movw	r22, r16
    18a2:	8c 2f       	mov	r24, r28
    18a4:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <ADCEventHandler>
	USBEventHandler(eventId, eventArg);
    18a8:	b8 01       	movw	r22, r16
    18aa:	8c 2f       	mov	r24, r28
    18ac:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <USBEventHandler>
	BATEventHandler(eventId, eventArg);
    18b0:	b8 01       	movw	r22, r16
    18b2:	8c 2f       	mov	r24, r28
    18b4:	0e 94 d0 06 	call	0xda0	; 0xda0 <BATEventHandler>
	BTNEventHandler(eventId, eventArg);
    18b8:	b8 01       	movw	r22, r16
    18ba:	8c 2f       	mov	r24, r28
    18bc:	0e 94 bf 07 	call	0xf7e	; 0xf7e <BTNEventHandler>
	// Other event handlers here...
}
    18c0:	cf 91       	pop	r28
    18c2:	1f 91       	pop	r17
    18c4:	0f 91       	pop	r16
    18c6:	08 95       	ret

000018c8 <main>:
static const char Unknown[] = "Unknown";

int main(void)
{
	U16 ms, elapsedMs = 0;
	OSIssueEvent(EVENT_PREINIT, 0);
    18c8:	60 e0       	ldi	r22, 0x00	; 0
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
	OSIssueEvent(EVENT_INIT, 0);
    18d2:	60 e0       	ldi	r22, 0x00	; 0
    18d4:	70 e0       	ldi	r23, 0x00	; 0
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
	OSIssueEvent(EVENT_POSTINIT, 0);
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	82 e0       	ldi	r24, 0x02	; 2
    18e2:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
	sei();	// Enable interrupts
    18e6:	78 94       	sei
static const char PowerOn[] = "PowerOn";
static const char Unknown[] = "Unknown";

int main(void)
{
	U16 ms, elapsedMs = 0;
    18e8:	c0 e0       	ldi	r28, 0x00	; 0
    18ea:	d0 e0       	ldi	r29, 0x00	; 0
		OSIssueEvent(EVENT_TICK, ms);
		elapsedMs += ms;
		if (elapsedMs >= MS_PERSEC) {
			OSIssueEvent(EVENT_SECOND, elapsedMs / MS_PERSEC);
			elapsedS += elapsedMs / MS_PERSEC;
			elapsedMs %= MS_PERSEC;	// Keep remainder
    18ec:	0f 2e       	mov	r0, r31
    18ee:	f8 ee       	ldi	r31, 0xE8	; 232
    18f0:	ef 2e       	mov	r14, r31
    18f2:	f3 e0       	ldi	r31, 0x03	; 3
    18f4:	ff 2e       	mov	r15, r31
    18f6:	f0 2d       	mov	r31, r0
	OSIssueEvent(EVENT_INIT, 0);
	OSIssueEvent(EVENT_POSTINIT, 0);
	sei();	// Enable interrupts
	for (;;) {
		ms = 1;	// Should set this up correctly once we have a timer...
		OSIssueEvent(EVENT_TICK, ms);
    18f8:	61 e0       	ldi	r22, 0x01	; 1
    18fa:	70 e0       	ldi	r23, 0x00	; 0
    18fc:	83 e0       	ldi	r24, 0x03	; 3
    18fe:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
		elapsedMs += ms;
    1902:	21 96       	adiw	r28, 0x01	; 1
		if (elapsedMs >= MS_PERSEC) {
    1904:	c8 3e       	cpi	r28, 0xE8	; 232
    1906:	83 e0       	ldi	r24, 0x03	; 3
    1908:	d8 07       	cpc	r29, r24
    190a:	b0 f3       	brcs	.-20     	; 0x18f8 <main+0x30>
			OSIssueEvent(EVENT_SECOND, elapsedMs / MS_PERSEC);
    190c:	9e 01       	movw	r18, r28
    190e:	36 95       	lsr	r19
    1910:	27 95       	ror	r18
    1912:	36 95       	lsr	r19
    1914:	27 95       	ror	r18
    1916:	36 95       	lsr	r19
    1918:	27 95       	ror	r18
    191a:	a5 ec       	ldi	r26, 0xC5	; 197
    191c:	b0 e2       	ldi	r27, 0x20	; 32
    191e:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__umulhisi3>
    1922:	8c 01       	movw	r16, r24
    1924:	12 95       	swap	r17
    1926:	02 95       	swap	r16
    1928:	0f 70       	andi	r16, 0x0F	; 15
    192a:	01 27       	eor	r16, r17
    192c:	1f 70       	andi	r17, 0x0F	; 15
    192e:	01 27       	eor	r16, r17
    1930:	b8 01       	movw	r22, r16
    1932:	84 e0       	ldi	r24, 0x04	; 4
    1934:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
			elapsedS += elapsedMs / MS_PERSEC;
    1938:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <elapsedS>
    193c:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <elapsedS+0x1>
    1940:	80 0f       	add	r24, r16
    1942:	91 1f       	adc	r25, r17
    1944:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <elapsedS+0x1>
    1948:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <elapsedS>
			elapsedMs %= MS_PERSEC;	// Keep remainder
    194c:	0e 9d       	mul	r16, r14
    194e:	c0 01       	movw	r24, r0
    1950:	0f 9d       	mul	r16, r15
    1952:	90 0d       	add	r25, r0
    1954:	1e 9d       	mul	r17, r14
    1956:	90 0d       	add	r25, r0
    1958:	11 24       	eor	r1, r1
    195a:	c8 1b       	sub	r28, r24
    195c:	d9 0b       	sbc	r29, r25
    195e:	cc cf       	rjmp	.-104    	; 0x18f8 <main+0x30>

00001960 <OSitoa>:
#include <stdarg.h>

static char* ramPtr;

char* OSitoa(int val, char* buf, int radix, U8 pad) // buf must be 10 or more chars long, radix must be <=36
{
    1960:	cf 92       	push	r12
    1962:	df 92       	push	r13
    1964:	ff 92       	push	r15
    1966:	0f 93       	push	r16
    1968:	1f 93       	push	r17
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	ec 01       	movw	r28, r24
    1970:	8a 01       	movw	r16, r20
    int wasNegative = false;
    U8 count = 0;
    U8 i;
    unsigned int uval = (unsigned int)val;
    1972:	fc 01       	movw	r30, r24
    char* pDigit = buf+10; // Move to end of buffer, to work backwards

    if (pad) {
    1974:	22 23       	and	r18, r18
    1976:	71 f0       	breq	.+28     	; 0x1994 <OSitoa+0x34>
        char padc = (16 == radix) ? '0' : ' ';
    1978:	40 31       	cpi	r20, 0x10	; 16
    197a:	51 05       	cpc	r21, r1
    197c:	11 f0       	breq	.+4      	; 0x1982 <OSitoa+0x22>
    197e:	90 e2       	ldi	r25, 0x20	; 32
    1980:	01 c0       	rjmp	.+2      	; 0x1984 <OSitoa+0x24>
    1982:	90 e3       	ldi	r25, 0x30	; 48
    1984:	db 01       	movw	r26, r22
    1986:	ab 01       	movw	r20, r22
    1988:	46 5f       	subi	r20, 0xF6	; 246
    198a:	5f 4f       	sbci	r21, 0xFF	; 255
        for (i = 0; i < 10; i++) {
            buf[i] = padc;
    198c:	9d 93       	st	X+, r25
    unsigned int uval = (unsigned int)val;
    char* pDigit = buf+10; // Move to end of buffer, to work backwards

    if (pad) {
        char padc = (16 == radix) ? '0' : ' ';
        for (i = 0; i < 10; i++) {
    198e:	a4 17       	cp	r26, r20
    1990:	b5 07       	cpc	r27, r21
    1992:	e1 f7       	brne	.-8      	; 0x198c <OSitoa+0x2c>
            buf[i] = padc;
        }
    }
    *--pDigit = 0; // Terminate string
    1994:	db 01       	movw	r26, r22
    1996:	19 96       	adiw	r26, 0x09	; 9
    1998:	1c 92       	st	X, r1
    if ((10 == radix) && (val < 0)) { // Decimal numbers may be negative
    199a:	0a 30       	cpi	r16, 0x0A	; 10
    199c:	11 05       	cpc	r17, r1
    199e:	09 f0       	breq	.+2      	; 0x19a2 <OSitoa+0x42>
    19a0:	47 c0       	rjmp	.+142    	; 0x1a30 <OSitoa+0xd0>
    19a2:	dd 23       	and	r29, r29
    19a4:	44 f4       	brge	.+16     	; 0x19b6 <OSitoa+0x56>
        wasNegative = true;
        uval = -val;
    19a6:	ee 27       	eor	r30, r30
    19a8:	ff 27       	eor	r31, r31
    19aa:	ec 1b       	sub	r30, r28
    19ac:	fd 0b       	sbc	r31, r29
            buf[i] = padc;
        }
    }
    *--pDigit = 0; // Terminate string
    if ((10 == radix) && (val < 0)) { // Decimal numbers may be negative
        wasNegative = true;
    19ae:	cc 24       	eor	r12, r12
    19b0:	c3 94       	inc	r12
    19b2:	d1 2c       	mov	r13, r1
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <OSitoa+0x5a>

static char* ramPtr;

char* OSitoa(int val, char* buf, int radix, U8 pad) // buf must be 10 or more chars long, radix must be <=36
{
    int wasNegative = false;
    19b6:	c1 2c       	mov	r12, r1
    19b8:	d1 2c       	mov	r13, r1
    *--pDigit = 0; // Terminate string
    if ((10 == radix) && (val < 0)) { // Decimal numbers may be negative
        wasNegative = true;
        uval = -val;
    }
    if (uval) {
    19ba:	30 97       	sbiw	r30, 0x00	; 0
    19bc:	f1 f0       	breq	.+60     	; 0x19fa <OSitoa+0x9a>
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <OSitoa+0x64>

static char* ramPtr;

char* OSitoa(int val, char* buf, int radix, U8 pad) // buf must be 10 or more chars long, radix must be <=36
{
    int wasNegative = false;
    19c0:	c1 2c       	mov	r12, r1
    19c2:	d1 2c       	mov	r13, r1
        char padc = (16 == radix) ? '0' : ' ';
        for (i = 0; i < 10; i++) {
            buf[i] = padc;
        }
    }
    *--pDigit = 0; // Terminate string
    19c4:	eb 01       	movw	r28, r22
    19c6:	29 96       	adiw	r28, 0x09	; 9
    19c8:	30 e0       	ldi	r19, 0x00	; 0
        wasNegative = true;
        uval = -val;
    }
    if (uval) {
        while (uval) {
            char digit = uval%radix;
    19ca:	f0 2e       	mov	r15, r16
    19cc:	41 2f       	mov	r20, r17
    19ce:	cf 01       	movw	r24, r30
    19d0:	b8 01       	movw	r22, r16
    19d2:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__udivmodhi4>
            *--pDigit = digit + ((digit > 9) ? '7' : '0'); // 7 chars between '9' and 'A' in ASCII
    19d6:	21 97       	sbiw	r28, 0x01	; 1
    19d8:	8a 30       	cpi	r24, 0x0A	; 10
    19da:	10 f4       	brcc	.+4      	; 0x19e0 <OSitoa+0x80>
    19dc:	90 e3       	ldi	r25, 0x30	; 48
    19de:	01 c0       	rjmp	.+2      	; 0x19e2 <OSitoa+0x82>
    19e0:	97 e3       	ldi	r25, 0x37	; 55
    19e2:	89 0f       	add	r24, r25
    19e4:	88 83       	st	Y, r24
            uval /= radix;
    19e6:	cf 01       	movw	r24, r30
    19e8:	6f 2d       	mov	r22, r15
    19ea:	74 2f       	mov	r23, r20
    19ec:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__udivmodhi4>
    19f0:	fb 01       	movw	r30, r22
            count++;
    19f2:	3f 5f       	subi	r19, 0xFF	; 255
    if ((10 == radix) && (val < 0)) { // Decimal numbers may be negative
        wasNegative = true;
        uval = -val;
    }
    if (uval) {
        while (uval) {
    19f4:	30 97       	sbiw	r30, 0x00	; 0
    19f6:	59 f7       	brne	.-42     	; 0x19ce <OSitoa+0x6e>
    19f8:	06 c0       	rjmp	.+12     	; 0x1a06 <OSitoa+0xa6>
            *--pDigit = digit + ((digit > 9) ? '7' : '0'); // 7 chars between '9' and 'A' in ASCII
            uval /= radix;
            count++;
        }
    } else {
        *--pDigit = '0'; // Simple case of 0 being passed in
    19fa:	eb 01       	movw	r28, r22
    19fc:	28 96       	adiw	r28, 0x08	; 8
    19fe:	80 e3       	ldi	r24, 0x30	; 48
    1a00:	fb 01       	movw	r30, r22
    1a02:	80 87       	std	Z+8, r24	; 0x08
        count = 1;
    1a04:	31 e0       	ldi	r19, 0x01	; 1
    }
    if (wasNegative) *--pDigit = '-';
    1a06:	cd 28       	or	r12, r13
    1a08:	11 f0       	breq	.+4      	; 0x1a0e <OSitoa+0xae>
    1a0a:	8d e2       	ldi	r24, 0x2D	; 45
    1a0c:	8a 93       	st	-Y, r24
    if (pad) pDigit -= ((pad < count) ? 0 : (pad - count));
    1a0e:	22 23       	and	r18, r18
    1a10:	a1 f0       	breq	.+40     	; 0x1a3a <OSitoa+0xda>
    1a12:	23 17       	cp	r18, r19
    1a14:	40 f0       	brcs	.+16     	; 0x1a26 <OSitoa+0xc6>
    1a16:	82 2f       	mov	r24, r18
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	83 1b       	sub	r24, r19
    1a1c:	91 09       	sbc	r25, r1
    1a1e:	91 95       	neg	r25
    1a20:	81 95       	neg	r24
    1a22:	91 09       	sbc	r25, r1
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <OSitoa+0xca>
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	c8 0f       	add	r28, r24
    1a2c:	d9 1f       	adc	r29, r25
    return pDigit; // Returns start of actual string of digits (inside original buffer, but probably not at the start)
    1a2e:	05 c0       	rjmp	.+10     	; 0x1a3a <OSitoa+0xda>
    *--pDigit = 0; // Terminate string
    if ((10 == radix) && (val < 0)) { // Decimal numbers may be negative
        wasNegative = true;
        uval = -val;
    }
    if (uval) {
    1a30:	30 97       	sbiw	r30, 0x00	; 0
    1a32:	31 f6       	brne	.-116    	; 0x19c0 <OSitoa+0x60>

static char* ramPtr;

char* OSitoa(int val, char* buf, int radix, U8 pad) // buf must be 10 or more chars long, radix must be <=36
{
    int wasNegative = false;
    1a34:	c1 2c       	mov	r12, r1
    1a36:	d1 2c       	mov	r13, r1
    1a38:	e0 cf       	rjmp	.-64     	; 0x19fa <OSitoa+0x9a>
        count = 1;
    }
    if (wasNegative) *--pDigit = '-';
    if (pad) pDigit -= ((pad < count) ? 0 : (pad - count));
    return pDigit; // Returns start of actual string of digits (inside original buffer, but probably not at the start)
}
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	1f 91       	pop	r17
    1a42:	0f 91       	pop	r16
    1a44:	ff 90       	pop	r15
    1a46:	df 90       	pop	r13
    1a48:	cf 90       	pop	r12
    1a4a:	08 95       	ret

00001a4c <OSvsprintf>:
    va_end(args);
    return ramPtr-buf-1;    // Return size of new string (not including terminating '\0')
}

void OSvsprintf(PUTC putc, char* str, va_list args) // Minimal vsprintf(), extensively modified from http://codereview.stackexchange.com/questions/96354/sample-printf-implementation
{
    1a4c:	6f 92       	push	r6
    1a4e:	7f 92       	push	r7
    1a50:	8f 92       	push	r8
    1a52:	9f 92       	push	r9
    1a54:	af 92       	push	r10
    1a56:	bf 92       	push	r11
    1a58:	cf 92       	push	r12
    1a5a:	df 92       	push	r13
    1a5c:	ef 92       	push	r14
    1a5e:	ff 92       	push	r15
    1a60:	0f 93       	push	r16
    1a62:	1f 93       	push	r17
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	2a 97       	sbiw	r28, 0x0a	; 10
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	f8 94       	cli
    1a72:	de bf       	out	0x3e, r29	; 62
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	cd bf       	out	0x3d, r28	; 61
    1a78:	7c 01       	movw	r14, r24
    1a7a:	8b 01       	movw	r16, r22
    1a7c:	6a 01       	movw	r12, r20
            case 'd': {
                pcTemp = OSitoa(va_arg(args, int), acTemp, 10, pad);
                while (*pcTemp) putc(*pcTemp++);  // Copy decimal
            } break;
            case 'x': {
                pcTemp = OSitoa(va_arg(args, int), acTemp, 16, max(pad,2));
    1a7e:	68 94       	set
    1a80:	99 24       	eor	r9, r9
    1a82:	91 f8       	bld	r9, 1
    while ((ch = *str++)) {
	    U8 pad = 0;
        if (ch == '%') {
            switch (ch = *str++) {
            case '2': pad = 2; ch = *str++; break;
            case '4': pad = 4; ch = *str++; break;
    1a84:	68 94       	set
    1a86:	88 24       	eor	r8, r8
    1a88:	82 f8       	bld	r8, 2
            case '8': pad = 8; ch = *str++; break;
    1a8a:	68 94       	set
    1a8c:	77 24       	eor	r7, r7
    1a8e:	73 f8       	bld	r7, 3
    char ch;  // Character under consideration
    char acTemp[10];  // Buffer to hold string of digits
    char* pcTemp;

    while ((ch = *str++)) {
	    U8 pad = 0;
    1a90:	61 2c       	mov	r6, r1
{
    char ch;  // Character under consideration
    char acTemp[10];  // Buffer to hold string of digits
    char* pcTemp;

    while ((ch = *str++)) {
    1a92:	a3 c0       	rjmp	.+326    	; 0x1bda <OSvsprintf+0x18e>
	    U8 pad = 0;
        if (ch == '%') {
    1a94:	85 32       	cpi	r24, 0x25	; 37
    1a96:	09 f0       	breq	.+2      	; 0x1a9a <OSvsprintf+0x4e>
    1a98:	96 c0       	rjmp	.+300    	; 0x1bc6 <OSvsprintf+0x17a>
            switch (ch = *str++) {
    1a9a:	d8 01       	movw	r26, r16
    1a9c:	11 96       	adiw	r26, 0x01	; 1
    1a9e:	8c 91       	ld	r24, X
    1aa0:	84 33       	cpi	r24, 0x34	; 52
    1aa2:	71 f0       	breq	.+28     	; 0x1ac0 <OSvsprintf+0x74>
    1aa4:	88 33       	cpi	r24, 0x38	; 56
    1aa6:	99 f0       	breq	.+38     	; 0x1ace <OSvsprintf+0x82>
    1aa8:	82 33       	cpi	r24, 0x32	; 50
    1aaa:	21 f0       	breq	.+8      	; 0x1ab4 <OSvsprintf+0x68>
    1aac:	0e 5f       	subi	r16, 0xFE	; 254
    1aae:	1f 4f       	sbci	r17, 0xFF	; 255
    char ch;  // Character under consideration
    char acTemp[10];  // Buffer to hold string of digits
    char* pcTemp;

    while ((ch = *str++)) {
	    U8 pad = 0;
    1ab0:	26 2d       	mov	r18, r6
    1ab2:	12 c0       	rjmp	.+36     	; 0x1ad8 <OSvsprintf+0x8c>
        if (ch == '%') {
            switch (ch = *str++) {
            case '2': pad = 2; ch = *str++; break;
    1ab4:	f8 01       	movw	r30, r16
    1ab6:	82 81       	ldd	r24, Z+2	; 0x02
    1ab8:	0d 5f       	subi	r16, 0xFD	; 253
    1aba:	1f 4f       	sbci	r17, 0xFF	; 255
    1abc:	29 2d       	mov	r18, r9
    1abe:	0c c0       	rjmp	.+24     	; 0x1ad8 <OSvsprintf+0x8c>
            case '4': pad = 4; ch = *str++; break;
    1ac0:	d8 01       	movw	r26, r16
    1ac2:	12 96       	adiw	r26, 0x02	; 2
    1ac4:	8c 91       	ld	r24, X
    1ac6:	0d 5f       	subi	r16, 0xFD	; 253
    1ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aca:	28 2d       	mov	r18, r8
    1acc:	05 c0       	rjmp	.+10     	; 0x1ad8 <OSvsprintf+0x8c>
            case '8': pad = 8; ch = *str++; break;
    1ace:	f8 01       	movw	r30, r16
    1ad0:	82 81       	ldd	r24, Z+2	; 0x02
    1ad2:	0d 5f       	subi	r16, 0xFD	; 253
    1ad4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad6:	27 2d       	mov	r18, r7
            }
            switch (ch) {
    1ad8:	84 36       	cpi	r24, 0x64	; 100
    1ada:	71 f0       	breq	.+28     	; 0x1af8 <OSvsprintf+0xac>
    1adc:	38 f4       	brcc	.+14     	; 0x1aec <OSvsprintf+0xa0>
    1ade:	85 32       	cpi	r24, 0x25	; 37
    1ae0:	09 f4       	brne	.+2      	; 0x1ae4 <OSvsprintf+0x98>
    1ae2:	6d c0       	rjmp	.+218    	; 0x1bbe <OSvsprintf+0x172>
    1ae4:	83 36       	cpi	r24, 0x63	; 99
    1ae6:	09 f4       	brne	.+2      	; 0x1aea <OSvsprintf+0x9e>
    1ae8:	60 c0       	rjmp	.+192    	; 0x1baa <OSvsprintf+0x15e>
    1aea:	77 c0       	rjmp	.+238    	; 0x1bda <OSvsprintf+0x18e>
    1aec:	83 37       	cpi	r24, 0x73	; 115
    1aee:	09 f4       	brne	.+2      	; 0x1af2 <OSvsprintf+0xa6>
    1af0:	45 c0       	rjmp	.+138    	; 0x1b7c <OSvsprintf+0x130>
    1af2:	88 37       	cpi	r24, 0x78	; 120
    1af4:	09 f1       	breq	.+66     	; 0x1b38 <OSvsprintf+0xec>
    1af6:	71 c0       	rjmp	.+226    	; 0x1bda <OSvsprintf+0x18e>
            case 'd': {
                pcTemp = OSitoa(va_arg(args, int), acTemp, 10, pad);
    1af8:	56 01       	movw	r10, r12
    1afa:	f2 e0       	ldi	r31, 0x02	; 2
    1afc:	af 0e       	add	r10, r31
    1afe:	b1 1c       	adc	r11, r1
    1b00:	4a e0       	ldi	r20, 0x0A	; 10
    1b02:	50 e0       	ldi	r21, 0x00	; 0
    1b04:	be 01       	movw	r22, r28
    1b06:	6f 5f       	subi	r22, 0xFF	; 255
    1b08:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0a:	d6 01       	movw	r26, r12
    1b0c:	8d 91       	ld	r24, X+
    1b0e:	9c 91       	ld	r25, X
    1b10:	0e 94 b0 0c 	call	0x1960	; 0x1960 <OSitoa>
    1b14:	fc 01       	movw	r30, r24
                while (*pcTemp) putc(*pcTemp++);  // Copy decimal
    1b16:	80 81       	ld	r24, Z
    1b18:	88 23       	and	r24, r24
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <OSvsprintf+0xd2>
    1b1c:	59 c0       	rjmp	.+178    	; 0x1bd0 <OSvsprintf+0x184>
    1b1e:	6f 01       	movw	r12, r30
    1b20:	bf ef       	ldi	r27, 0xFF	; 255
    1b22:	cb 1a       	sub	r12, r27
    1b24:	db 0a       	sbc	r13, r27
    1b26:	f7 01       	movw	r30, r14
    1b28:	09 95       	icall
    1b2a:	d6 01       	movw	r26, r12
    1b2c:	8d 91       	ld	r24, X+
    1b2e:	6d 01       	movw	r12, r26
    1b30:	81 11       	cpse	r24, r1
    1b32:	f9 cf       	rjmp	.-14     	; 0x1b26 <OSvsprintf+0xda>
            case '4': pad = 4; ch = *str++; break;
            case '8': pad = 8; ch = *str++; break;
            }
            switch (ch) {
            case 'd': {
                pcTemp = OSitoa(va_arg(args, int), acTemp, 10, pad);
    1b34:	65 01       	movw	r12, r10
    1b36:	51 c0       	rjmp	.+162    	; 0x1bda <OSvsprintf+0x18e>
                while (*pcTemp) putc(*pcTemp++);  // Copy decimal
            } break;
            case 'x': {
                pcTemp = OSitoa(va_arg(args, int), acTemp, 16, max(pad,2));
    1b38:	56 01       	movw	r10, r12
    1b3a:	b2 e0       	ldi	r27, 0x02	; 2
    1b3c:	ab 0e       	add	r10, r27
    1b3e:	b1 1c       	adc	r11, r1
    1b40:	22 30       	cpi	r18, 0x02	; 2
    1b42:	08 f4       	brcc	.+2      	; 0x1b46 <OSvsprintf+0xfa>
    1b44:	29 2d       	mov	r18, r9
    1b46:	40 e1       	ldi	r20, 0x10	; 16
    1b48:	50 e0       	ldi	r21, 0x00	; 0
    1b4a:	be 01       	movw	r22, r28
    1b4c:	6f 5f       	subi	r22, 0xFF	; 255
    1b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b50:	f6 01       	movw	r30, r12
    1b52:	80 81       	ld	r24, Z
    1b54:	91 81       	ldd	r25, Z+1	; 0x01
    1b56:	0e 94 b0 0c 	call	0x1960	; 0x1960 <OSitoa>
    1b5a:	fc 01       	movw	r30, r24
                while (*pcTemp) putc(*pcTemp++);  // Copy hex
    1b5c:	80 81       	ld	r24, Z
    1b5e:	88 23       	and	r24, r24
    1b60:	c9 f1       	breq	.+114    	; 0x1bd4 <OSvsprintf+0x188>
    1b62:	6f 01       	movw	r12, r30
    1b64:	9f ef       	ldi	r25, 0xFF	; 255
    1b66:	c9 1a       	sub	r12, r25
    1b68:	d9 0a       	sbc	r13, r25
    1b6a:	f7 01       	movw	r30, r14
    1b6c:	09 95       	icall
    1b6e:	d6 01       	movw	r26, r12
    1b70:	8d 91       	ld	r24, X+
    1b72:	6d 01       	movw	r12, r26
    1b74:	81 11       	cpse	r24, r1
    1b76:	f9 cf       	rjmp	.-14     	; 0x1b6a <OSvsprintf+0x11e>
            case 'd': {
                pcTemp = OSitoa(va_arg(args, int), acTemp, 10, pad);
                while (*pcTemp) putc(*pcTemp++);  // Copy decimal
            } break;
            case 'x': {
                pcTemp = OSitoa(va_arg(args, int), acTemp, 16, max(pad,2));
    1b78:	65 01       	movw	r12, r10
    1b7a:	2f c0       	rjmp	.+94     	; 0x1bda <OSvsprintf+0x18e>
                while (*pcTemp) putc(*pcTemp++);  // Copy hex
            } break;
            case 's': {
                pcTemp = va_arg(args, char*);
    1b7c:	56 01       	movw	r10, r12
    1b7e:	b2 e0       	ldi	r27, 0x02	; 2
    1b80:	ab 0e       	add	r10, r27
    1b82:	b1 1c       	adc	r11, r1
    1b84:	d6 01       	movw	r26, r12
    1b86:	ed 91       	ld	r30, X+
    1b88:	fc 91       	ld	r31, X
                while (*pcTemp) putc(*pcTemp++);  // Copy string
    1b8a:	80 81       	ld	r24, Z
    1b8c:	88 23       	and	r24, r24
    1b8e:	21 f1       	breq	.+72     	; 0x1bd8 <OSvsprintf+0x18c>
    1b90:	6f 01       	movw	r12, r30
    1b92:	bf ef       	ldi	r27, 0xFF	; 255
    1b94:	cb 1a       	sub	r12, r27
    1b96:	db 0a       	sbc	r13, r27
    1b98:	f7 01       	movw	r30, r14
    1b9a:	09 95       	icall
    1b9c:	d6 01       	movw	r26, r12
    1b9e:	8d 91       	ld	r24, X+
    1ba0:	6d 01       	movw	r12, r26
    1ba2:	81 11       	cpse	r24, r1
    1ba4:	f9 cf       	rjmp	.-14     	; 0x1b98 <OSvsprintf+0x14c>
            case 'x': {
                pcTemp = OSitoa(va_arg(args, int), acTemp, 16, max(pad,2));
                while (*pcTemp) putc(*pcTemp++);  // Copy hex
            } break;
            case 's': {
                pcTemp = va_arg(args, char*);
    1ba6:	65 01       	movw	r12, r10
    1ba8:	18 c0       	rjmp	.+48     	; 0x1bda <OSvsprintf+0x18e>
                while (*pcTemp) putc(*pcTemp++);  // Copy string
            } break;
            case 'c': putc(va_arg(args, int)); break; // Copy char
    1baa:	56 01       	movw	r10, r12
    1bac:	b2 e0       	ldi	r27, 0x02	; 2
    1bae:	ab 0e       	add	r10, r27
    1bb0:	b1 1c       	adc	r11, r1
    1bb2:	f6 01       	movw	r30, r12
    1bb4:	80 81       	ld	r24, Z
    1bb6:	f7 01       	movw	r30, r14
    1bb8:	09 95       	icall
    1bba:	65 01       	movw	r12, r10
    1bbc:	0e c0       	rjmp	.+28     	; 0x1bda <OSvsprintf+0x18e>
            case '%': putc(ch); break;// Allow for %% to be printed as %
    1bbe:	85 e2       	ldi	r24, 0x25	; 37
    1bc0:	f7 01       	movw	r30, r14
    1bc2:	09 95       	icall
    1bc4:	0a c0       	rjmp	.+20     	; 0x1bda <OSvsprintf+0x18e>
{
    char ch;  // Character under consideration
    char acTemp[10];  // Buffer to hold string of digits
    char* pcTemp;

    while ((ch = *str++)) {
    1bc6:	0f 5f       	subi	r16, 0xFF	; 255
    1bc8:	1f 4f       	sbci	r17, 0xFF	; 255
            } break;
            case 'c': putc(va_arg(args, int)); break; // Copy char
            case '%': putc(ch); break;// Allow for %% to be printed as %
            // default is to absorb the character after the % if we don't understand it
            } // end switch
        } else putc(ch);  // Just copy char directly
    1bca:	f7 01       	movw	r30, r14
    1bcc:	09 95       	icall
    1bce:	05 c0       	rjmp	.+10     	; 0x1bda <OSvsprintf+0x18e>
            case '4': pad = 4; ch = *str++; break;
            case '8': pad = 8; ch = *str++; break;
            }
            switch (ch) {
            case 'd': {
                pcTemp = OSitoa(va_arg(args, int), acTemp, 10, pad);
    1bd0:	65 01       	movw	r12, r10
    1bd2:	03 c0       	rjmp	.+6      	; 0x1bda <OSvsprintf+0x18e>
                while (*pcTemp) putc(*pcTemp++);  // Copy decimal
            } break;
            case 'x': {
                pcTemp = OSitoa(va_arg(args, int), acTemp, 16, max(pad,2));
    1bd4:	65 01       	movw	r12, r10
    1bd6:	01 c0       	rjmp	.+2      	; 0x1bda <OSvsprintf+0x18e>
                while (*pcTemp) putc(*pcTemp++);  // Copy hex
            } break;
            case 's': {
                pcTemp = va_arg(args, char*);
    1bd8:	65 01       	movw	r12, r10
{
    char ch;  // Character under consideration
    char acTemp[10];  // Buffer to hold string of digits
    char* pcTemp;

    while ((ch = *str++)) {
    1bda:	d8 01       	movw	r26, r16
    1bdc:	8c 91       	ld	r24, X
    1bde:	81 11       	cpse	r24, r1
    1be0:	59 cf       	rjmp	.-334    	; 0x1a94 <OSvsprintf+0x48>
            case '%': putc(ch); break;// Allow for %% to be printed as %
            // default is to absorb the character after the % if we don't understand it
            } // end switch
        } else putc(ch);  // Just copy char directly
    } // end while
    putc('\0');  // Terminate string
    1be2:	f7 01       	movw	r30, r14
    1be4:	09 95       	icall
}
    1be6:	2a 96       	adiw	r28, 0x0a	; 10
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	ff 90       	pop	r15
    1bfc:	ef 90       	pop	r14
    1bfe:	df 90       	pop	r13
    1c00:	cf 90       	pop	r12
    1c02:	bf 90       	pop	r11
    1c04:	af 90       	pop	r10
    1c06:	9f 90       	pop	r9
    1c08:	8f 90       	pop	r8
    1c0a:	7f 90       	pop	r7
    1c0c:	6f 90       	pop	r6
    1c0e:	08 95       	ret

00001c10 <UARTputc>:
	UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);  // set 8N1 frame format
}

void UARTputc(char c)
{
	while (!(UCSR1A & (1<<UDRE1))) ;  // wait for Uart Data Register Empty bit to be set
    1c10:	e8 ec       	ldi	r30, 0xC8	; 200
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	90 81       	ld	r25, Z
    1c16:	95 ff       	sbrs	r25, 5
    1c18:	fd cf       	rjmp	.-6      	; 0x1c14 <UARTputc+0x4>
	UDR1 = c;  // send char
    1c1a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1c1e:	08 95       	ret

00001c20 <UARTInit>:
	}
}

void UARTInit(void)
{
	UBRR1H = 0;
    1c20:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = 12;	//3!=19200, 6!=9600, but 12==4800baud with 1MHz clock
    1c24:	8c e0       	ldi	r24, 0x0C	; 12
    1c26:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
#ifdef UART_READCHAR
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);  // Enable both uart TX & Rx
#else	//ifndef UART_READCHAR
	UCSR1B = (1<<TXEN1);  // Just enable uart TX (Leave Rx for ADXL363 Int2)
    1c2a:	88 e0       	ldi	r24, 0x08	; 8
    1c2c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
#endif	//def UART_READCHAR
	UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);  // set 8N1 frame format
    1c30:	86 e0       	ldi	r24, 0x06	; 6
    1c32:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    1c36:	08 95       	ret

00001c38 <UARTEventHandler>:
char cmdBuf[MAX_CMDLEN];	// Handy buffer for accumulating commands from serial port
#endif	//def UART_READCHAR

void UARTEventHandler(U8 eventId, U16 eventArg)
{
	switch (eventId) {
    1c38:	87 30       	cpi	r24, 0x07	; 7
    1c3a:	39 f0       	breq	.+14     	; 0x1c4a <UARTEventHandler+0x12>
    1c3c:	88 30       	cpi	r24, 0x08	; 8
    1c3e:	41 f0       	breq	.+16     	; 0x1c50 <UARTEventHandler+0x18>
    1c40:	81 30       	cpi	r24, 0x01	; 1
    1c42:	69 f4       	brne	.+26     	; 0x1c5e <UARTEventHandler+0x26>
	case EVENT_INIT:
		UARTInit();
    1c44:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <UARTInit>
#ifdef UART_READCHAR
		*cmdBuf = 0;
#endif	//def UART_READCHAR
		break;
    1c48:	08 95       	ret
			*cmdBuf = 0;	// Ready for a new command
		}
		break;
#endif	//def UART_READCHAR
	case EVENT_SLEEP:
		UCSR1B = 0x00;	// Disable UART
    1c4a:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
		break;
    1c4e:	08 95       	ret
	case EVENT_WAKE:
		PRR1 &= ~0x01;	// Re-enable USART by clearing bit in Power Reduction Register
    1c50:	e5 e6       	ldi	r30, 0x65	; 101
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	8e 7f       	andi	r24, 0xFE	; 254
    1c58:	80 83       	st	Z, r24
		UARTInit();	// Must re-enable UART after sleep
    1c5a:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <UARTInit>
    1c5e:	08 95       	ret

00001c60 <OSprintf>:
	while (!(UCSR1A & (1<<UDRE1))) ;  // wait for Uart Data Register Empty bit to be set
	UDR1 = c;  // send char
}

void OSprintf(char* str, ...)	// Actually UARTprintf()
{
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    1c68:	ae 01       	movw	r20, r28
    1c6a:	4b 5f       	subi	r20, 0xFB	; 251
    1c6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c6e:	fa 01       	movw	r30, r20
    1c70:	61 91       	ld	r22, Z+
    1c72:	71 91       	ld	r23, Z+
    1c74:	af 01       	movw	r20, r30
    va_list args;
    va_start(args, str);
    OSvsprintf(UARTputc, str, args);
    1c76:	88 e0       	ldi	r24, 0x08	; 8
    1c78:	9e e0       	ldi	r25, 0x0E	; 14
    1c7a:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <OSvsprintf>
    va_end(args);
}
    1c7e:	df 91       	pop	r29
    1c80:	cf 91       	pop	r28
    1c82:	08 95       	ret

00001c84 <__vector_10>:

static bool usbInt = false;
static bool usbState;

ISR(USB_GEN_vect)	// USB state change.  See C:\Program Files (x86)\Atmel\Studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\avr\iom32u4.h
{
    1c84:	1f 92       	push	r1
    1c86:	0f 92       	push	r0
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	0f 92       	push	r0
    1c8c:	11 24       	eor	r1, r1
    1c8e:	8f 93       	push	r24
	USBINT = 0x00;	// Clear interrupt
    1c90:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	usbInt = true;	// Tell foreground
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <usbInt>
}
    1c9a:	8f 91       	pop	r24
    1c9c:	0f 90       	pop	r0
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	0f 90       	pop	r0
    1ca2:	1f 90       	pop	r1
    1ca4:	18 95       	reti

00001ca6 <USBEventHandler>:

void USBEventHandler(Event event, U16 eventArg)
{
	switch (event) {
    1ca6:	82 30       	cpi	r24, 0x02	; 2
    1ca8:	41 f0       	breq	.+16     	; 0x1cba <USBEventHandler+0x14>
    1caa:	83 30       	cpi	r24, 0x03	; 3
    1cac:	61 f0       	breq	.+24     	; 0x1cc6 <USBEventHandler+0x20>
    1cae:	81 30       	cpi	r24, 0x01	; 1
    1cb0:	c1 f5       	brne	.+112    	; 0x1d22 <USBEventHandler+0x7c>
	case EVENT_INIT:
		USBCON = 0x11;	// Enable USB power detection (but not the USB controller).  NB Doesn't work!  :-(
    1cb2:	81 e1       	ldi	r24, 0x11	; 17
    1cb4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
		break;
    1cb8:	08 95       	ret
	case EVENT_POSTINIT:
		usbState = (0 != (USBSTA & 0x01));	// State (true if attached, false if detached). Could probably assume attached after reset in real life, unless we expect watchdog resets...
    1cba:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    1cbe:	81 70       	andi	r24, 0x01	; 1
    1cc0:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <usbState>
		break;
    1cc4:	08 95       	ret
	case EVENT_TICK:
		if (usbInt) {
    1cc6:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <usbInt>
    1cca:	88 23       	and	r24, r24
    1ccc:	51 f1       	breq	.+84     	; 0x1d22 <USBEventHandler+0x7c>
			usbInt = false;	// Acknowledge software interrupt
    1cce:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <usbInt>
			usbState = (0 != (USBSTA & 0x01));	// State (true if attached, false if detached)
    1cd2:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    1cd6:	91 e0       	ldi	r25, 0x01	; 1
    1cd8:	28 2f       	mov	r18, r24
    1cda:	21 70       	andi	r18, 0x01	; 1
    1cdc:	80 ff       	sbrs	r24, 0
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <usbState>
			OSprintf("USB %s%s", (usbState) ?"ATTached" : "DETached", OS_NEWLINE);
    1ce4:	21 11       	cpse	r18, r1
    1ce6:	03 c0       	rjmp	.+6      	; 0x1cee <USBEventHandler+0x48>
    1ce8:	8f e4       	ldi	r24, 0x4F	; 79
    1cea:	92 e0       	ldi	r25, 0x02	; 2
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <USBEventHandler+0x4c>
    1cee:	86 e4       	ldi	r24, 0x46	; 70
    1cf0:	92 e0       	ldi	r25, 0x02	; 2
    1cf2:	2d ec       	ldi	r18, 0xCD	; 205
    1cf4:	31 e0       	ldi	r19, 0x01	; 1
    1cf6:	3f 93       	push	r19
    1cf8:	2f 93       	push	r18
    1cfa:	9f 93       	push	r25
    1cfc:	8f 93       	push	r24
    1cfe:	88 e5       	ldi	r24, 0x58	; 88
    1d00:	92 e0       	ldi	r25, 0x02	; 2
    1d02:	9f 93       	push	r25
    1d04:	8f 93       	push	r24
    1d06:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <OSprintf>
			OSIssueEvent(EVENT_USB, usbState);
    1d0a:	60 91 a4 02 	lds	r22, 0x02A4	; 0x8002a4 <usbState>
    1d0e:	70 e0       	ldi	r23, 0x00	; 0
    1d10:	8e e0       	ldi	r24, 0x0E	; 14
    1d12:	0e 94 39 0c 	call	0x1872	; 0x1872 <_OSIssueEvent>
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	08 95       	ret

00001d24 <__udivmodhi4>:
    1d24:	aa 1b       	sub	r26, r26
    1d26:	bb 1b       	sub	r27, r27
    1d28:	51 e1       	ldi	r21, 0x11	; 17
    1d2a:	07 c0       	rjmp	.+14     	; 0x1d3a <__udivmodhi4_ep>

00001d2c <__udivmodhi4_loop>:
    1d2c:	aa 1f       	adc	r26, r26
    1d2e:	bb 1f       	adc	r27, r27
    1d30:	a6 17       	cp	r26, r22
    1d32:	b7 07       	cpc	r27, r23
    1d34:	10 f0       	brcs	.+4      	; 0x1d3a <__udivmodhi4_ep>
    1d36:	a6 1b       	sub	r26, r22
    1d38:	b7 0b       	sbc	r27, r23

00001d3a <__udivmodhi4_ep>:
    1d3a:	88 1f       	adc	r24, r24
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	5a 95       	dec	r21
    1d40:	a9 f7       	brne	.-22     	; 0x1d2c <__udivmodhi4_loop>
    1d42:	80 95       	com	r24
    1d44:	90 95       	com	r25
    1d46:	bc 01       	movw	r22, r24
    1d48:	cd 01       	movw	r24, r26
    1d4a:	08 95       	ret

00001d4c <__divmodhi4>:
    1d4c:	97 fb       	bst	r25, 7
    1d4e:	07 2e       	mov	r0, r23
    1d50:	16 f4       	brtc	.+4      	; 0x1d56 <__divmodhi4+0xa>
    1d52:	00 94       	com	r0
    1d54:	07 d0       	rcall	.+14     	; 0x1d64 <__divmodhi4_neg1>
    1d56:	77 fd       	sbrc	r23, 7
    1d58:	09 d0       	rcall	.+18     	; 0x1d6c <__divmodhi4_neg2>
    1d5a:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__udivmodhi4>
    1d5e:	07 fc       	sbrc	r0, 7
    1d60:	05 d0       	rcall	.+10     	; 0x1d6c <__divmodhi4_neg2>
    1d62:	3e f4       	brtc	.+14     	; 0x1d72 <__divmodhi4_exit>

00001d64 <__divmodhi4_neg1>:
    1d64:	90 95       	com	r25
    1d66:	81 95       	neg	r24
    1d68:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6a:	08 95       	ret

00001d6c <__divmodhi4_neg2>:
    1d6c:	70 95       	com	r23
    1d6e:	61 95       	neg	r22
    1d70:	7f 4f       	sbci	r23, 0xFF	; 255

00001d72 <__divmodhi4_exit>:
    1d72:	08 95       	ret

00001d74 <__tablejump2__>:
    1d74:	ee 0f       	add	r30, r30
    1d76:	ff 1f       	adc	r31, r31
    1d78:	05 90       	lpm	r0, Z+
    1d7a:	f4 91       	lpm	r31, Z
    1d7c:	e0 2d       	mov	r30, r0
    1d7e:	09 94       	ijmp

00001d80 <__umulhisi3>:
    1d80:	a2 9f       	mul	r26, r18
    1d82:	b0 01       	movw	r22, r0
    1d84:	b3 9f       	mul	r27, r19
    1d86:	c0 01       	movw	r24, r0
    1d88:	a3 9f       	mul	r26, r19
    1d8a:	70 0d       	add	r23, r0
    1d8c:	81 1d       	adc	r24, r1
    1d8e:	11 24       	eor	r1, r1
    1d90:	91 1d       	adc	r25, r1
    1d92:	b2 9f       	mul	r27, r18
    1d94:	70 0d       	add	r23, r0
    1d96:	81 1d       	adc	r24, r1
    1d98:	11 24       	eor	r1, r1
    1d9a:	91 1d       	adc	r25, r1
    1d9c:	08 95       	ret

00001d9e <_exit>:
    1d9e:	f8 94       	cli

00001da0 <__stop_program>:
    1da0:	ff cf       	rjmp	.-2      	; 0x1da0 <__stop_program>
